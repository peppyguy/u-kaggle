{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "bf1653b5-495c-9fd0-496e-5a96bc19bc8c"
      },
      "source": [
        "This is a visualization of the first 10,000 jobs. Node size indicates in-degree (how many jobs come into this station). Node colors indicate the Line. Alpha of paths indicates how often jobs go from this station to another. One can nicely see parallel station setups and overflow / backup lines."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ed6edb9e-22b5-9a8b-bb2a-1a31ccd733bd"
      },
      "outputs": [],
      "source": [
        "options(warn=-1) #surpress warnings\n",
        "\n",
        "#imports for data wrangling\n",
        "library(data.table)\n",
        "library(dtplyr)\n",
        "library(dplyr)\n",
        "\n",
        "#get the data - nrows set to 10000 to keep runtime manageable.\n",
        "#one expansion option would be to select a time frame to visualized\n",
        "dtNum <- fread(\"../input/train_numeric.csv\", select = c(\"Id\", \"Response\"),nrows = 10000)\n",
        "dtDate <- fread(\"../input/train_date.csv\", nrows = 10000)\n",
        "\n",
        "#for each job identify which stations are passed through and for those store the minimum time\n",
        "for (station in paste0(\"S\",0:51))\n",
        "{\n",
        "  cols = min(which((grepl(station,colnames(dtDate)))))\n",
        "  if(!cols==Inf){\n",
        "    dtDate[,paste0(station) := dtDate[,cols,with = FALSE]]\n",
        "  }\n",
        "}\n",
        "\n",
        "#limit data to only when passed through station X\n",
        "dtStations = dtDate[,!grepl(\"L\",colnames(dtDate)),with=F]\n",
        "\n",
        "#melt data to go from wide to long format\n",
        "dtStationsM = melt(dtStations,id.vars=c(\"Id\"))\n",
        "\n",
        "#join with numeric to have Response\n",
        "dtStationsM %>%\n",
        "  left_join(dtNum, by = \"Id\") -> dtStationsM\n",
        "\n",
        "#remove NA entries - these are plentiful as after melting each station-job combination has its own row\n",
        "dtStationsM %>%\n",
        "  filter(!is.na(value)) -> dtStationsMFiltered\n",
        "\n",
        "#sort entries by ascending time\n",
        "dtStationsMFiltered %>%\n",
        "  arrange(value) -> dtStationsMFiltered\n",
        "\n",
        "#imports for plotting\n",
        "require(GGally)\n",
        "library(network)\n",
        "library(sna)\n",
        "library(ggplot2)\n",
        "\n",
        "#plotting format\n",
        "options(repr.plot.width=5, repr.plot.height=15)\n",
        "\n",
        "#for each row obtain the subsequent statoin\n",
        "dtStationsMFiltered %>%\n",
        "  group_by(Id) %>%\n",
        "  mutate(nextStation = lead(variable)) -> edgelistsComplete\n",
        "\n",
        "#for each id find the first node to be entered \n",
        "edgelistsComplete %>%\n",
        "  group_by(Id) %>%\n",
        "  filter(!(variable %in% nextStation)) %>%\n",
        "  ungroup() %>%\n",
        "  select(variable,Response) -> startingPoints\n",
        "\n",
        "#prior to each starting point insert an edge from a common origin\n",
        "colnames(startingPoints) = c(\"nextStation\",\"Response\")\n",
        "startingPoints$variable = \"S\"\n",
        "edgelistsComplete %>%\n",
        "  select(variable,nextStation,Response) -> paths\n",
        "\n",
        "#for each id find the row where there is no next station (last station to be visited)\n",
        "#fill this station with Response value\n",
        "paths[is.na(nextStation)]$nextStation = paste(\"Result\",paths[is.na(nextStation)]$Response)\n",
        "\n",
        "#combine data\n",
        "paths = rbind(startingPoints,paths)\n",
        "paths = select(paths,-Response)\n",
        "paths$nextStation = as.character(paths$nextStation)\n",
        "paths$variable = as.character(paths$variable)\n",
        "\n",
        "#rename columns for plotting\n",
        "colnames(paths) <- c(\"Target\",\"Source\")\n",
        "\n",
        "#flip columns in a costly way because ggnet is a little dumb and I am lazy\n",
        "pathshelp = select(paths,Source)\n",
        "pathshelp$Target = paths$Target\n",
        "paths=pathshelp\n",
        "\n",
        "#create network from edgelist\n",
        "net = network(as.data.frame(na.omit(paths)),\n",
        "              directed = TRUE)\n",
        "\n",
        "#create a station-line mapping lookup\n",
        "LineStations = NULL\n",
        "for (station in unique(paths$Source)){\n",
        "  if(station!=\"S\")\n",
        "  {\n",
        "  x=paste0(\"_\",station,\"_\")\n",
        "  y=head(colnames(dtDate)[which(grepl(x,colnames(dtDate)))],1)\n",
        "  y=strsplit(y,\"_\")[[1]][1]\n",
        "  LineStations = rbind(LineStations,data.frame(Node=station,Line=y))\n",
        "  }\n",
        "}\n",
        "LineStations = rbind(LineStations,data.frame(Node=c(\"Result 1\",\"Result 0\",\"S\"),Line=c(\"Outcome\",\"Outcome\",\"START\")))\n",
        "\n",
        "#merge station-line mapping into graph for coloring purposes\n",
        "x = data.frame(Node = network.vertex.names(net))\n",
        "x = merge(x, LineStations, by = \"Node\", sort = FALSE)$Line\n",
        "net %v% \"line\" = as.character(x)\n",
        "\n",
        "#setup station coordinates analogue to @JohnM\n",
        "nodeCoordinates=data.frame(label=c(\"S\",\"S0\",\"S1\",\"S2\",\"S3\",\"S4\",\"S5\",\"S6\",\n",
        "                                  \"S7\",\"S8\",\"S9\",\"S10\",\"S11\",\"S12\",\"S13\",\n",
        "                                  \"S14\",\"S15\",\"S16\",\"S17\",\"S18\",\"S19\",\n",
        "                                  \"S20\",\"S21\",\"S22\",\"S23\",\"S24\",\"S25\",\n",
        "                                  \"S26\",\"S27\",\"S28\",\"S29\",\"S30\",\"S31\",\n",
        "                                  \"S32\",\"S33\",\"S34\",\"S35\",\"S36\",\"S37\",\n",
        "                                  \"S38\",\"S39\",\"S40\",\"S41\",\"S43\",\n",
        "                                  \"S44\",\"S45\",\"S47\",\"S48\",\"S49\",\n",
        "                                  \"S50\",\"S51\",\"Result 0\",\"Result 1\"),\n",
        "                           y=c(0,\n",
        "                               1,2,3,3,4,4,5,5,6,7,7,7,\n",
        "                               1,2,3,3,4,4,5,5,6,7,7,7,\n",
        "                               6,6,7,7,7,\n",
        "                               8,9,10,10,10,11,11,12,13,14,\n",
        "                               8,9,10,11,11,12,13,14,15,15,16,\n",
        "                               17,17),\n",
        "                           x=c(5,\n",
        "                               9,9,10,8,10,8,10,8,7,10,9,8,\n",
        "                               5,5,6,4,6,4,6,4,5,6,5,4,\n",
        "                               2,0,2,1,0,\n",
        "                               7,7,8,7,6,8,6,7,7,7,\n",
        "                               3,3,3,4,2,3,3,3,4,2,3,\n",
        "                               7,3))\n",
        "\n",
        "nodeCoordinates$y = -3 * nodeCoordinates$y\n",
        "\n",
        "#setup initial plot\n",
        "network = ggnet2(net)\n",
        "\n",
        "#grab node list from initial plot and attach coordinates\n",
        "netCoordinates = select(network$data,label)\n",
        "netCoordinates = left_join(netCoordinates,nodeCoordinates,by = \"label\")\n",
        "netCoordinates = as.matrix(select(netCoordinates,x,y))\n",
        "\n",
        "#setup plot with manual layout\n",
        "network = ggnet2(net,\n",
        "                 alpha = 0.75, size = \"indegree\",\n",
        "                 label = T, size.cut = 4,\n",
        "                 color = \"line\",palette = \"Set1\",\n",
        "                 mode = netCoordinates,\n",
        "                 edge.alpha = 0.5, edge.size = 1,\n",
        "                 legend.position = \"bottom\")\n",
        "\n",
        "\n",
        "#output plot on graphics device\n",
        "print(network)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "23aab779-e965-5bca-ac14-b65bb343998d"
      },
      "source": [
        "It may for other analyses potentially be interesting which paths are used a lot. And which ones are used very seldom? Also which ones lead to Response=1 or Response=0?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "30e71224-2287-5a2a-1bf7-486e4fc4b09f"
      },
      "outputs": [],
      "source": [
        "#obtain summary statistic of number of edges on each station pair\n",
        "pathshelp %>%\n",
        "    mutate(stationpair=paste0(Source,\"->\",Target)) %>%\n",
        "    group_by(stationpair) %>%\n",
        "    summarize(count=n()) %>%\n",
        "    arrange(-count) %>%\n",
        "    print(n=10)\n",
        "\n",
        "pathshelp %>%\n",
        "    mutate(stationpair=paste0(Source,\"->\",Target)) %>%\n",
        "    group_by(stationpair) %>%\n",
        "    summarize(count=n()) %>%\n",
        "    arrange(count) %>%\n",
        "    print(n=10)\n",
        "\n",
        "pathshelp %>%\n",
        "    filter(Target==\"Result 1\") %>%\n",
        "    mutate(stationpair=paste0(Source,\"->\",Target)) %>%\n",
        "    group_by(stationpair) %>%\n",
        "    summarize(count=n()) %>%\n",
        "    arrange(count) %>%\n",
        "    print(n=20)\n",
        "\n",
        "pathshelp %>%\n",
        "    filter(Target==\"Result 0\") %>%\n",
        "    mutate(stationpair=paste0(Source,\"->\",Target)) %>%\n",
        "    group_by(stationpair) %>%\n",
        "    summarize(count=n()) %>%\n",
        "    arrange(count) %>%\n",
        "    print(n=20)"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}