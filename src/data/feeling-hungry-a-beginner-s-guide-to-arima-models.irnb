{"nbformat_minor": 0, "cells": [{"source": ["# **Recruit Holdings : Forecasting Visitors**\n", "\n", "This is an exploration of ARIMA  modeling techniques using R's built-in time series packages for the [Recruit Restaurant Visitor Forecasting](https://www.kaggle.com/c/recruit-restaurant-visitor-forecasting). The goal of this challenge is to forecast future visitor demand at various restaurants. The dataset fits on a simple computer and is ideal to play around with. \n", "\n", "<img src='http://www.gion.co.nz/_images/function_room_3.jpg'  />\n", "\n", "While the competition provides a number of structured datasets, for this exploration, we will only be using the following two datasets:\n", "\n", "**1. air_visit_data.csv :** historical data for the air restaurants, this is the main dataset\n", "\n", "**2. air_store_info.csv :** details about the restaurants such as location and genre\n", "\n", "\n", "# ** Time Series Primer**\n", "\n", "A time series is a structured dataset that can be annual, monthly, or in this case daily. To begin to understand the models, lets outline some key concepts about time-series. \n", "\n", "## ** Time series has to be stationary **\n", "There are 3 conditions that must be fulfilled, otherwise a time series cannot be modeled \n", "\n", "#### ** 1. Constant Mean: AKA no overall trend **\n", "<img src='https://www.analyticsvidhya.com/wp-content/uploads/2015/02/Mean_nonstationary.png' />\n", "#### ** 2. Constant Variance: the magnitude of waviness should remain constant **\n", "<img src='https://www.analyticsvidhya.com/wp-content/uploads/2015/02/Var_nonstationary.png' />\n", "#### ** 3. Frequency: the waves should be evenly spaced **\n", "<img src='https://www.analyticsvidhya.com/wp-content/uploads/2015/02/Cov_nonstationary.png' />\n", "\n", "#### ** Another consideration: Seasonailty **\n", "<img src ='https://searchengineland.com/figz/wp-content/seloads/2012/09/High_Seasonality_Pic1.png' />\n", "Seasonality can be on a weekly, monthly, quarterly, or annual basis. \n", "\n", "- Example:the sales of products around Christmas every year\n", "- Example: the number of public transit riders during different days of the week.\n", "\n", "### **Simple example: Airplane passengers**\n", "<img src='http://rstatistics.net/wp-content/uploads/2014/09/Seasonal-AirPassengers.png' style='width:500px' />\n", "Note above, the above time series has both a linear upward trend and a seasonal cycle. Luckily the upward trend and seasonality can be addressed with time series techniques\n", "\n", "\n", "# ** Forecasting in R: ARIMA Models**\n", "\n", "<img src='https://i.stack.imgur.com/ux3i7.png' style='width:500px' />\n", "\n", "The main technique being explored is **ARIMA** which stands for **Auto Regressive Integrated Moving Average**.\n", "\n", "Wikipedia defines ARIMA as: \"stands for Autoregressive Integrated Moving Average models. Univariate (single vector) ARIMA is a forecasting technique that projects the future values of a series based entirely on its own inertia. Its main application is in the area of short term forecasting requiring at least 40 historical data points.\"\n", "\n", "The **auto regressive** part of the model determines the **dependence on previous time points**. The **moving average** part of the model determines the **dependence on errors at different points**\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "fbea859e-72e6-49c7-9f00-403e76cf4263", "_uuid": "47269b9f11acaadcb2a6d7285d8bd9853808468d"}}, {"execution_count": null, "source": ["# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n", "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n", "# For example, here's several helpful packages to load in \n", "\n", "library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function\n", "library(knitr)\n", "library(tidyverse)\n", "# Input data files are available in the \"../input/\" directory.\n", "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n", "\n", "system(\"ls ../input\")\n", "\n", "# Any results you write to the current directory are saved as output."], "cell_type": "code", "metadata": {"_kg_hide-input": true, "collapsed": false, "_cell_guid": "e9a52c8a-7df8-45f2-aaf2-06e5d11ab6b5", "_kg_hide-output": true, "_uuid": "a376ac016eea2c0125d734f5f8225760ed5bc5a7"}, "outputs": []}, {"source": ["## **Load the data****"], "cell_type": "markdown", "metadata": {"_cell_guid": "062abed0-59f8-4a6d-9589-aec932a95799", "_uuid": "e9acbf2a3c17dedcd90cb9bb62a56d4cad52c9f3"}}, {"execution_count": null, "source": ["df_air <- read_csv(file = '../input/air_visit_data.csv')\n", "df_air_store <- read_csv('../input/air_store_info.csv')\n"], "cell_type": "code", "metadata": {"_kg_hide-input": false, "collapsed": false, "_cell_guid": "2357da5d-13a6-4a29-bf2a-7f1d71c9c100", "_kg_hide-output": true, "_uuid": "ad24888d3c9af4506975aff41d339f794bd6ae27"}, "outputs": []}, {"source": ["## **Let's Look at the Overall Visitor Data**"], "cell_type": "markdown", "metadata": {"_cell_guid": "81e2be0f-3988-40bf-9c71-13c04b1f7cce", "_uuid": "6a006be2ed5e568ca681ec72b30b6bafdf0c9731"}}, {"execution_count": null, "source": ["par(mfrow=c(2,1), cex=0.7)\n", "df_air %>% \n", "  group_by(visit_date) %>% \n", "  summarize(visitors = sum(visitors)) %>% \n", "  plot(type='l', main='Overall Visitors')\n", "\n", "merged <- df_air %>% \n", "  filter(visit_date > '2016-07-01') %>% \n", "  dplyr::left_join(df_air_store, by='air_store_id', how='left')\n", "\n", "merged_sum <- merged %>% \n", "  group_by(visit_date) %>% \n", "  summarize(visitors = sum(visitors)) \n", "\n", "merged_sum %>% \n", "  plot(type='l', xlab='Year', main='Cut-off at July 2016')"], "cell_type": "code", "metadata": {"_kg_hide-input": true, "collapsed": false, "_cell_guid": "93e94f13-f402-44f8-89d0-1474b95a9c93", "_uuid": "120ca17c23d6c141c84f3b65cf2f30b7e1599b03"}, "outputs": []}, {"source": ["#### **Discussion**\n", "We see from the overall dataset, there's definitely a cyclical aspect to the dataset, but overall a steady level of visitors. Each year, there appears to be a very slight upward trend. This is hard to verify because of a strong increase in visitors in the middle of 2016. This strong discontinuity cannot be modeled, so the data used will be cut off at july 2016 or later"], "cell_type": "markdown", "metadata": {"_cell_guid": "27e4a30d-5816-4006-86d6-b638a8027935", "_uuid": "86f243905f09be21a2daa2b985a8ff2470021010"}}, {"source": ["## **Let's Model overall visitors: Our first Arima Model**\n", "`arima(merged_train$visitors, order=c(2,1,2), seasonal= list(order=c(1,1,1), period=7))`\n", "#### Comments:\n", "- **train split**: since this is a time series, it can't be completely at random, and the holdout data should avoid irregularities. In this case there's a strong drop in January that we will be sure to avoid when making a decision on cut off\n", "- **`seasonal`** - addresses how many weeks in the past will be examined\n", "- **period** from zooming in we will assume a weekly cycle, or a `period=7` in our arima model. \n", "-** `order`** - addresses how many days in the past are considered when predicting new visitor values?"], "cell_type": "markdown", "metadata": {"_cell_guid": "ea68ff73-35fc-428b-ab9e-9acb9e9be986", "_uuid": "2b221d1baf0b983ff10eb0d03b6dfb5619b07360"}}, {"execution_count": null, "source": ["merged_train <- merged_sum %>% filter(visit_date <='2017-02-01')\n", "merged_test <- merged_sum %>% filter(visit_date >'2017-02-01')\n", "\n", "#print(paste(nrow(merged_sum),nrow(merged_train),nrow(merged_test)))\n", "\n", "m <- arima(merged_train$visitors, order=c(2,1,2), seasonal= list(order=c(1,1,1), period=7))\n", "y_pred <- forecast::forecast(m, h=80)\n", "\n", "par(mfrow=c(1,1), cex=0.7)\n", "plot(ts(merged_sum$visitors), main=\"ARIMA model predictions, cut off at Feb 2017\")\n", "lines(y_pred$mean, col='red')"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "c09bea79-0051-4c18-b194-49a8830b99d0", "_uuid": "70026f98e51b6b065eae93fafeeba4ac962ff837"}, "outputs": []}, {"source": ["## **A model for Every Genre**\n", "\n", "We will now see if we can create a model for each genre of food. We first determined that there are **14 different food genres**, listed below"], "cell_type": "markdown", "metadata": {"_cell_guid": "1e219ca1-aee2-4d33-aa1d-846d67faf7dd", "_uuid": "01b49d14e41cd9ff144f6b1b7d7a12fed32735d2"}}, {"execution_count": null, "source": ["genre_sum <- merged %>%\n", "  group_by(visit_date, air_genre_name) %>% \n", "  summarize(visitors=sum(visitors))\n", "\n", "genre_unique <- merged %>% select(air_genre_name) %>% unique %>% unlist  \n", "genre_unique"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "97e61bf0-75e2-4a4e-a2b8-bd6b3dceb73d", "_uuid": "46fe09867bd66395d362199a0d3316dcc8c04cf6"}, "outputs": []}, {"source": ["Let's see how our basic parameters, training split year, and example each of the genre"], "cell_type": "markdown", "metadata": {"_cell_guid": "adc66c49-5b2d-4bf4-aca8-cf633a43a12f", "_uuid": "7fd6f8609bda3bd661d3093b2ce53e30bf3c10a0"}}, {"execution_count": null, "source": ["graph_list <- list()\n", "\n", "plot_genre <- function(i){\n", "  genre_specific_sum <- genre_sum %>% filter(air_genre_name==i)\n", "  genre_train <- genre_specific_sum %>% filter(visit_date <='2017-02-01')\n", "  genre_test <- genre_specific_sum %>% filter(visit_date >'2017-02-01')\n", "  \n", "  m <- arima(genre_train$visitors, order=c(2,1,2), seasonal= list(order=c(1,1,1), period=7))\n", "  y_pred <- forecast::forecast(m, h=80)\n", "\n", "  plot(ts(genre_specific_sum$visitors), main=i, xlab='Year', ylab='visitors')\n", "  lines(y_pred$mean, col='red')\n", "}\n", "\n", "par(mfrow=c(3,1), cex=0.7)\n", "plot_genre(genre_unique[1])\n", "plot_genre(genre_unique[2])\n", "plot_genre(genre_unique[3])\n"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "f7da4a20-5feb-441b-920f-36e60891fd64", "_uuid": "1af89a1bfc79a4cc245272cdadf7cb4f29f7cc99"}, "outputs": []}, {"execution_count": null, "source": ["par(mfrow=c(3,1), cex=0.7)\n", "plot_genre(genre_unique[4])\n", "plot_genre(genre_unique[5])\n", "plot_genre(genre_unique[6])"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "2e818b75-3473-480a-99f0-53de950f67d9", "_uuid": "9ebf05eab89c1c4600c05104de256f24f0d4fcad"}, "outputs": []}, {"execution_count": null, "source": ["par(mfrow=c(3,1), cex=0.7)\n", "plot_genre(genre_unique[7])\n", "plot_genre(genre_unique[8])\n", "plot_genre(genre_unique[9])"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "88095854-88d1-462c-8326-5caf8705ca54", "_uuid": "029f3aeb3fc648401b948c28c763adf5c05109f6"}, "outputs": []}, {"execution_count": null, "source": ["par(mfrow=c(3,1), cex=0.7)\n", "plot_genre(genre_unique[10])\n", "plot_genre(genre_unique[11])\n", "plot_genre(genre_unique[12])"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "5607b778-f6b5-46d9-9069-6356f6c8f74a", "_uuid": "4c0d96287eb57eeed586cdbdaee05298d8ada912"}, "outputs": []}, {"execution_count": null, "source": ["par(mfrow=c(3,1), cex=0.7)\n", "plot_genre(genre_unique[13])\n", "plot_genre(genre_unique[14])"], "cell_type": "code", "metadata": {"collapsed": false, "_cell_guid": "03e56d35-0f17-481f-98c7-049ab7a67149", "_uuid": "2751286bb16b1cc7d29b48ca8f3bcbbd4b94598e"}, "outputs": []}, {"execution_count": null, "source": [], "cell_type": "code", "metadata": {"collapsed": true, "_cell_guid": "f0e927fb-7918-40d3-a6e1-47a3cafe546b", "_uuid": "e10c3a921f5038aea2d4cb06464a784d11b5f407"}, "outputs": []}], "metadata": {"language_info": {"name": "R", "version": "3.4.2", "codemirror_mode": "r", "mimetype": "text/x-r-source", "file_extension": ".r", "pygments_lexer": "r"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "nbformat": 4}