{"cells":[{"metadata":{"_uuid":"fa46be77c30da53dd438ffe6e042e75c73354e94","_execution_state":"idle"},"cell_type":"markdown","source":"![](https://i.imgur.com/wiWCUKa.jpg)\n# Did Drought Cause the War in Syria? An R Tutorial\nThis kernel was written to assist Yasmin Al-Ghabra et al of the University of Bristol with an Interdisciplinary Research Internship study into the causes of the Syrian Civil War, and to serve as a tutorial in intermediate R for other Kaggle users. It examines historical precipitation levels in the Syrian Arab Republic, and extraterritorial areas where drainage feeds rivers that flow into the Syrian Arab Republic, using data from the Global Precipitation Climatology Centre and the CEO Water Mandate 2016 in order to assess whether there were unusual hydrological conditions prior to the outbreak of the conflict.\n\nTopics in R covered include working with geospatial and meteorological data, mapmaking, writing functions, multidimensional arrays, shapefiles, rasters, animations and use of the `apply()` family of vector functions. In the appendix there is a set of challenges for Kaggle users. All questions, comments and corrections are welcome.\n\n---\n## Contents\n* [**1 Introduction**](#1)\n   * [1.1 Background](#1.1)\n   * [1.2 Data Sources and References](#1.2)\n   * [1.3 Regarding Climate Change](#1.3)\n   * [1.4 Terminology, Style Notes and R Libraries](#1.4)\n* [**2 Geography of Syria**](#2)\n   * [2.1 Syria Profile](#2.1)\n   * [2.2 Mapmaking with ggmap](#2.2)\n   * [2.3 Hydrology of Syria](#2.3)\n* [**3 GPCC Precipitation Data**](#3)\n   * [3.1 Working with netCDF Files](#3.1)\n   * [3.2 Conversion Functions and Subsetting](#3.2)\n   * [3.3 Isolation of Syria Hydrological Region](#3.3)\n   * [3.4 Data Verification](#3.4)\n* [**4 Precipitation Data Analysis**](#4)\n   * [4.1 Dataframe Construction](#4.1)\n   * [4.2 Precipitation Distribution by Month](#4.2)\n   * [4.3 Total Precipitation by Year](#4.3)\n   * [4.4 Total Precipitation by Decade](#4.4) \n   * [4.5 Rolling 5-Year Mean Precipitation](#4.5)\n   * [4.6 Rolling 10-Year Mean Precipitation](#4.6)\n   * [4.7 Animation: Buildup to the Civil War](#4.7)\n* [**5 Conclusions**](#5)\n* [**6 Appendix**](#6)\n  * [6.1 Notes on gganimate](#6.1)\n  * [6.2 Exercises for the Reader](#6.2)\n   \n---\n<a id='1'></a>\n# 1 Introduction\n\n<a id='1.1'></a>\n## 1.1 Background\n\nThe Syrian Civil War is an ongoing civil conflict that began at some point in 2011; the exact date varies according to different organisations' definitions of civil war. There is significant academic debate on the conditions that underpinned the war as it arose from a wide variety of economic, social, political, diplomatic and religious factors. The purpose of this study is to assess whether one of those factors may have been a shortage of water for agriculture, industry and personal consumption by analysing precipitation levels across the region and assessing whether they deviated significantly from the historical norm in the years leading up to the outbreak of hostilities. \n\n---\n<a id='1.2'></a>\n## 1.2 Data Sources and References\n\nThe precipitation data used in this study are from the Global Precipitation Climatology Centre (GPCC) Monthly Precipitation dataset 1901-2013 as recorded from surface monitoring stations. The data resolution is 0.5° longitude by 0.5° latitude. Full citation:\n\n> Schneider, Udo; Becker, Andreas; Finger, Peter; Meyer-Christoffer, Anja; Rudolf, Bruno; Ziese, Markus (2011): GPCC Full Data Reanalysis Version 6.0 at 0.5°: Monthly Land-Surface Precipitation from Rain-Gauges built on GTS-based and \n> Historic Data. DOI: 10.5676/DWD_GPCC/FD_M_V7_050\n\nThe watershed shapefiles are courtesy of the CEO Water Mandate 2016 Interactive Database of the World's River Basins via [ceowatermandate.org/disclosure/resources/river-basins/](https://)\n\nThe river and lake shapefiles are courtesy of Digital Chart of the World (DCW) via [www.diva-gis.org](https://)\n\n If citing this study for academic purposes please credit Richard Allen 2018 and all data sources herein.    \n\n---\n<a id='1.3'></a>\n## 1.3 Regarding Climate Change\n\nThis is not a study into climate change and no suggestion will be made that it is responsible for any regional weather variations. As a limited study concerning precipitation levels for a small area of the Earth's surface it is particularly unsuited to do so. The Intergovernmental Panel on Climate Change has a strict methodology for reaching such conclusions and **to date the IPCC has not implicated climate change in causing civil unrest across the Middle East and North Africa**.  This study will assess whether short-term weather patterns may have been a contributing factor to the conflict in Syria; it will not speculate as to the causes of those patterns.\n\n---\n<a id='1.4'></a>\n## 1.4 Terminology, Style Notes and R Libraries\nFor brevity the Syrian Arab Republic (SAR) will be referred to as Syria throughout this study. The following terms are used:\n\n* **Precipitation** refers to any form of condensed atmospheric water vapour that falls to Earth under gravity, typically in the form of rain or snow.\n* **Cell** refers to an individual area of 0.5° longitude by 0.5° latitude and its representation in a data structure.\n* **Syria External Watershed** refers to the area outside Syrian borders where precipitation falls in the watershed of rivers that flow into Syria.\n* **Syria Hydrological Region (SHR)** refers to both Syria and the Syria External Watershed collectively; it is the total area where precipitation will affect the hydrology of Syria. \n\nFor clarity I often suffix objects in R with a period followed by their datatype: 'v' for vectors, 'm' for matrices, 'a' for arrays, 'df' for dataframes, 'r' for rasters and so on. This helps with following the flow of code and will hopefully be of assistance to users who fork this kernel for their own work. When creating visualisations I strongly recommend use of the `viridis` palettes. They are designed to be accessible to viewers with various forms of colour-blindness while retaining a sleek and professional aesthetic. The code generally adheres to Google's R Style Guide but if I have deviated from it in a way that renders parts unclear then please notify me. Any and all questions, criticisms and comments are welcome and I will do my best to respond promptly. \n\nThe following libraries are used in this kernel:"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"aa7d0da6d06ba23f82dda7426255f8361372bfe1"},"cell_type":"code","source":"library(tidyverse) #general data analysis environment tools + ggplot\nlibrary(ggmap) #importing and displaying maps\nlibrary(rgdal) #working with shapefiles\nlibrary(ncdf4) #working with netCDF files\nlibrary(raster) #raster functions and datatype\nlibrary(rasterVis) #raster visualisation tools\nlibrary(gridExtra) #arranging multiple plots in grid\nlibrary(viridis) #colour palettes for visualisation\nlibrary(gganimate) #animating ggplot","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ead2873ff211fbd9424940fbfba32d128a0ebc22"},"cell_type":"markdown","source":"While the `gganimate` package in its current form isn't supported in Kaggle Notebooks, this kernel contains all the code and data for producing animations like this one which I compiled offline :\n\n![](https://media.giphy.com/media/1MXDHApgK8OXE7cViy/giphy.gif)\n\nInstructions for installing the latest `gganimate` package offline are found in the [Appendix](#6).\n\n---\n<a id='2'></a>\n# 2 Geography of Syria\n<a id='2.1'></a>\n## 2.1 Syria Overview\nSyria is a Middle Eastern country with a complex geography that borders Turkey to the north, Lebanon and Israel to the west, Iraq to the east and Jordan to the south. Its only coastline lies to the west on the Mediterranean Sea between Turkey and Lebanon. With an area of 71500 square miles it is the 87th largest country in the world. The west of the country has a warm Mediterranean climate (Köppen classification Csa) and is characterised by mountainous uplands that run from north to south, separated by a historically important valley called the Homs Gap that allows access from the coast to the inland of Syria. Progressing further inland from the west coast the topography flattens into steppes and plains broken by a low chain of mountains that stretch from southwest to northeast, while the climate is classified as cold semi-arid (BSk) in the north and cold desert (BWk) in the south repectively. The north of the country is dominated by the Euphrates river system whose tributaries and dammed areas provide a vital national source of water for human use. The Euphrates originates in the mountains of Turkey to the north, so although northern Syria has a warm semi-arid climate (BSh) itself it is fertile due to its many resulting waterways. The Euphrates then threads southeast through the interior plains of Syria towards the Iraqi border. The south and southeast of Syria comprise a flat, barren region called the Hamad with a warm desert climate (BWh). The package `ggmap` can be used in R to display a satellite view of the area which will be more instructive.\n\n---\n<a id='2.2'></a>\n## 2.2 Mapmaking with ggmap  \n\n`ggmap` is a versatile package that allows various forms of maps including satellite maps and road maps to be used as backgrounds for `ggplot`.  The longitude and latitude coordinates serve as the x and y axes so additional shapefiles and rasters can be layered over the background providing they share the same Coordinate Reference System. For more information on these please consult section 3.2 of my kernel on New York City: [https://www.kaggle.com/bigironsphere/tutorial-maps-eda-and-models-with-nyc-census-data](http://) which also provides a guide on working with shapefiles to plot geographic data.\n\nFirst a satellite image of the Syria region can be used as the background via `ggmap::get_map()`. This requires internet access so in the Settings section in the lower right-hand side of a Kaggle notebook select the option to allow internet connections."},{"metadata":{"trusted":true,"_uuid":"cc8b8666d8e6014b283e8365770fa77d77e65b36"},"cell_type":"code","source":"syr.map <- get_map(location = c(lon=39.0, lat=34.8),\n    color='color',\n    source='google',\n    maptype='satellite',\n    zoom=6)\n\nggmap(syr.map, extent='panel', maprange=F) +\n  labs(title='Satellite View of Syria and Surrounding Countries',\n       x='Longitude', y='Latitude')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4343efe1dc4b360147b0ea8327bf5e64134c860b"},"cell_type":"markdown","source":"Once a map has been loaded into `ggmap` to serve as the background any number of additional `ggplot` objects can be added in the conventional way.\n\nAdding the country borders will require working with shapefiles. This particular shapefile dataset contains the boundaries of all national administrative areas within countries while only the full national borders are needed; if read in and plotted by default it would look cluttered and unclear. Since this level of detail isn't required, to simplify the shapefile data the `region` argument in `fortify` must be set to the variable in `countries.spdf@data` which refers to the country as a whole rather than the specific administrative area. In this case that is `sov_a3`. "},{"metadata":{"trusted":true,"_uuid":"33c8b805557f2d5397ecc59cdee22f41287f19a7"},"cell_type":"code","source":"countries.spdf <- readOGR('../input/world-geo-data/ne_10m_admin_1_states_provinces.shp')\ncountries.df <- fortify(countries.spdf, region='sov_a3')","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"trusted":true,"_uuid":"833af7c3bef8d16991dc8984a3d550fd875659ac"},"cell_type":"code","source":"#only countries in Middle East region\nME.df <- countries.df[countries.df$long >= 35 & countries.df$long <= 43 &\n                     countries.df$lat > 31 & countries.df$lat < 42, ]\n#narrow down the selection to make plot smaller & neater\nME.v <- unique(ME.df$id)[2:length(unique(ME.df$id))]\nME.df <- countries.df[countries.df$id %in% ME.v, ]\n\nggmap(syr.map, extent='normal', maprange=F) +\n  #shapefiles plotted as polygons, fill=NA for transparency\n  #remember 'data=' must always be added at the front\n  geom_polygon(data=ME.df, aes(x=long, y=lat, group=group),\n                         fill=NA, colour='white', size=0.3, show.legend=F) +\n  #map projection + plot limits set to map limits   \n  coord_map(projection=\"mercator\",\n   xlim=c(attr(syr.map, 'bb')$ll.lon, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(attr(syr.map, 'bb')$ll.lat, attr(syr.map, 'bb')$ur.lat)) +\n  labs(title='Syria & Neighbouring Countries',\n       fill='Country',\n      x='Longitude',\n      y='Latitude') +\n  annotate('text', x=38.5, y=35, label='Syria', size=7) +\n  annotate('text', x=38.5, y=39, label='Turkey', colour='white', size=5) +\n  annotate('text', x=42, y=33, label='Iraq', size=5) +\n  annotate('text', x=41, y=29.5, label='Saudi Arabia', size=5) +\n  annotate('text', x=36.25, y=30.75, label='Jordan', size=5) +\n  annotate('text', x=34.5, y=34, label='Lebanon', colour='white', size=5) +\n  annotate('text', x=34, y=32, label='Israel', colour='white', size=5) -> syr.plot\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0342f66496ad1ecb5bb738ba40971a8d49ce12b4","_kg_hide-input":true},"cell_type":"code","source":"syr.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f5a8f9c67a4a14dd7577fcfe48aeba756e6c4281"},"cell_type":"markdown","source":"Several of the geographical features mentioned in section 2.1 are now clear. The prominent Euphrates flows southeast through Syria from the Turkish border to the Iraqi border through an otherwise barren-looking region of steppes and plains. The dry expanse of the Hamad lies to the south and southeast. There are more obvious signs of vegetation toward the west near the coast and the uplands that run around the Lebanese border up northwards to Turkey. To obtain a more practical view of Syrian hydrology the river and lake shapefiles can be added.  \n\n---\n<a id='2.3'></a>\n## 2.3 Hydrology of Syria"},{"metadata":{"trusted":true,"_uuid":"8d6c90f7c6abd215360187701fa8534bade7b2e9","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"#split spdf by river type, fortify separately, add type column then append dataframes\nsyr_r.spdf <- readOGR('../input/syria-river-and-lake-shapefiles/SYR_water_lines_dcw.shp')\nperm.df <- fortify(syr_r.spdf[syr_r.spdf@data$HYC_DESCRI == 'Perennial/Permanent', ])\nperm.df[['Type']] <- 'Perennial'\ntemp.df <- fortify(syr_r.spdf[syr_r.spdf@data$HYC_DESCRI != 'Perennial/Permanent', ])\ntemp.df[['Type']] <- 'Intermittent'\nsyr_r.df <- rbind(perm.df, temp.df)\n\n#split spdf by lake type, fortify separately, add type column then append dataframes\nsyr_l.spdf <- readOGR('../input/syria-river-and-lake-shapefiles/SYR_water_areas_dcw.shp')\nperm.df <- fortify(syr_l.spdf[syr_l.spdf@data$HYC_DESCRI == 'Perennial/Permanent', ])\nperm.df[['Type']] <- 'Perennial'\ntemp.df <- fortify(syr_l.spdf[syr_l.spdf@data$HYC_DESCRI != 'Perennial/Permanent', ])\ntemp.df[['Type']] <- 'Intermittent'\nsyr_l.df <- rbind(perm.df, temp.df)\n\n#close-up map: same except zoom=7 instead of 6\nsyr_s.map <- get_map(location = c(lon=39, lat=34.8),\n    color='color',\n    source='google',\n    maptype='satellite',\n    zoom=7)\n\nggmap(syr_s.map, extent = 'normal', maprange=FALSE) +\n  #country borders plotted the same as above\n  geom_polygon(data=ME.df, aes(x=long, y=lat, group=group),\n                         fill=NA, colour='white', size=0.3, alpha=1, show.legend=F) +\n  #add rivers\n  geom_line(data=syr_r.df, aes(y=lat, x=long, group=id, size=Type, colour=Type)) +\n  #add lakes\n  geom_polygon(data=syr_l.df, aes(y=lat, x=long, group=group, fill=Type)) +\n  coord_map(projection=\"mercator\",\n   xlim=c(attr(syr_s.map, \"bb\")$ll.lon, attr(syr_s.map, \"bb\")$ur.lon),\n   ylim=c(attr(syr_s.map, \"bb\")$ll.lat, attr(syr_s.map, \"bb\")$ur.lat)) +\n  labs(title='Rivers and Lakes of Syria',\n       colour='River Type',\n       fill='Lake Type',\n       size='River Type',\n      x='Longitude',\n      y='Latitude') +\n  #set sizes for river types: perennials should be more prominent\n  scale_size_manual(values=c(0.1, 0.4)) +\n  #set colours for lake/river types: perennials should be more prominent\n  scale_fill_manual(values=c('#005dff', 'navyblue')) +\n  scale_colour_manual(values=c('#005dff', 'navyblue')) +\n  #labels and annotations\n  annotate('text', x=38.5, y=34.8, label='Syria', size=5) +\n  geom_point(aes(x=42.33, y=37.23), size=10, shape=1, colour='red') +\n  geom_point(aes(x=36.4, y=32.9), size=40, shape=1, colour='red') +\n  geom_label(aes(x=42, y=36), size=3, colour='red', label='Tigris River\\nSection') +\n  geom_label(aes(x=39.7, y=37.32), size=5, colour='red', label='Euphrates River System') +\n  geom_label(aes(x=36, y=36.3), size=3, colour='red', label='Orontes\\nRiver\\nSystem') +\n  geom_label(aes(x=36, y=34), size=3, colour='red', label='Awaj\\nRiver') +\n  geom_label(aes(x=37.5, y=37), size=3, colour='red', label='Lake Assad') +\n  geom_label(aes(x=37.55, y=32.25), size=3, colour='red', label='River Jordan\\nDrainage Area') +\n  annotate('segment', x=37.65, xend=38.3, y=36.9, yend=35.9, colour='red', size=0.3) +\n  annotate('segment', x=42, xend=42.2, y=36.2, yend=37.15, colour='red', size=0.3) +\n  theme(legend.position = c(0.85, 0.2)) -> river.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"458c0a75cbc492b388393e152234c0df77a4722d","_kg_hide-input":true,"_kg_hide-output":false},"cell_type":"code","source":"river.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9c5b350c10fcf66ff7a229766e789762e815ae0e"},"cell_type":"markdown","source":"Syria is served predominantly by the Euphrates arm of the Tigris-Euphrates river system which flows southwards out of Turkey. The Tigris only skirts Syria, forming a 44km section of the Syria-Turkey border as it flows towards Iraq and is of lesser importance to Syrian agriculture and industry as a result. The Orontes (also called the Asi) flows northwards in a complex system fed by many tributaries, largely within Syrian borders but also extending north into Turkey. The river Jordan has its origins partly in the southernmost region of Syria before flowing through its namesake and Israel towards the Dead Sea. The river Awaj lies entirely within Syria and flows from Mount Hermon near the Lebanese border towards the capital city of Damascus. The Syrian interior contains a patchwork of intermittent rivers and lakes that rely on seasonal precipitation. Away from the west only the Euphrates and its major tributaries flow year-round and are of vital importance as a result (the small section on this map showing the Euphrates as intermittent is an oversight caused by the river narrowing south of Deir ez-Zur). \n\nThe extent of the river basins can now be examined:"},{"metadata":{"trusted":true,"_uuid":"ea073e58e81c579925627fe555af8df67cc42b0f","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"#read in separate shapefiles for river basins and fortify for plotting\ntigeuph.df <- fortify(readOGR('../input/orontes-river-basin/Aqueduct_river_basins_TIGRIS  EUPHRATES.shp'))\norontes.df <- fortify(readOGR('../input/orontes-river-basin/Aqueduct_river_basins_ASI (ORONTES).shp'))\ndeadsea.df <- fortify(readOGR('../input/orontes-river-basin/Aqueduct_river_basins_DEAD SEA.shp'))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a09640389486ddd0d1f5d6f8c1b0db4ca6bd721e","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"ggmap(syr.map, extent = \"normal\", maprange=FALSE) +\n  #Tigris-Euphrates polygon\n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group, fill='Tigris-Euphrates'),\n                         size = 0, alpha=0.3) +\n  #Orontes\n  geom_polygon(data = orontes.df, aes(x = long, y = lat,\n                               group=group, fill='Orontes (Asi)'),\n                         size = 0, alpha=0.4) +\n  #Jordan\n  geom_polygon(data = deadsea.df, aes(x = long, y = lat,\n                               group=group, fill='Jordan'),\n                         size = 0, alpha=0.4) +\n  #same as above, except fill scale and text\n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_manual(values = c('red', 'purple', 'green')) +\n  labs(title='Hydrology of Syria: Major River Basins',\n       fill='River Basin',\n       size='River Type',\n      x='Longitude',\n      y='Latitude',\n      caption='Source: CEO Water Mandate 2016') +\n  scale_size_manual(values=c(0.1, 0.3)) +\n  annotate('text', x=38.5, y=35, label='Syria', colour='white', size=5) +\n  #annotate can turn lines into arrows with arrow=arrow()!\n  annotate('segment', x=40, xend=40, y=39, yend=37.5,\n           colour='white', size=0.3, arrow=arrow()) +\n  annotate('segment', x=35.5, xend=35.5, y=34.5, yend=36.4,\n           colour='white', size=0.3, arrow=arrow()) +\n  annotate('segment', x=36.5, xend=36.5, y=33, yend=31.5, size=0.3,arrow=arrow()) +\n  annotate('text', x=34.75, y=35, label='Drainage\\nDirection\\n(Orontes)', colour='white', size=4) +\n  annotate('text', x=40, y=39.5, label='Drainage\\nDirection\\n(Euphrates)', colour='white', size=4) +\n  annotate('text', x=37.2, y=33.4, label='Drainage\\nDirection\\n(Jordan)', size=4) +\n  theme(legend.position = c(0.85, 0.15)) -> hydro.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a3a47f336e4949b6a72bde2a424adf37f3087f88","_kg_hide-input":true},"cell_type":"code","source":"hydro.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3709182aa679ca898afc59c006689d906b52812e"},"cell_type":"markdown","source":"The largest watershed by far is that of the Tigris-Euphrates which extends far northwards into Turkey towards Armenia. The portion of this river basin to the south and east of Syria's northest tip (approximately 42° Longitude 37° Latitude) feeds the Tigris below the section that comprises the northeastern border between Syria and Turkey. For this reason it will not be treated as within the Syria Hydrological Region. The portion west of 42° longitude in Turkey feeds the Euphrates, forming a vital resource for Syria's water requirements. The Orontes river basin lies almost entirely within Syria and as a northwards-flowing river the catchment area outside Syrian borders is not of concern here. The Jordan tributaries also flow out of Syria so likewise only the part within Syrian borders is relevant. The two areas of concern with therefore be Syria itself and the extraterritorial parts of the Tigris-Euphrates watershed that flow into it. Combined they form the Syria Hydrological Region (SHR).\n\nWith the boundaries of the SHR established the relevant precipitation data can be prepared and examined.\n\n---\n<a id='3'></a>\n# 3 GPCC Precipitation Data\n<a id='3.1'></a>\n## 3.1 Working with NetCDF Files \n\nNetCDF is a filetype used in fields such as meteorology, oceanography and climatology. It can be thought of as a series of grids across the Earth's surface that contain values for things like temperature, windspeed, sunlight intensity and so on for each specific cell in the grid. Together these grids form a time-dependent map for the relevant area. In this case the data concern global precipitation. These files can be large but are not especially complicated and will not require much data cleaning, although some conversion functions will prove necessary since the units used are not always intuitive. Helpfully they contain many attributes that are easy to access and that clarify how the data is stored and organised. The R package `ncdf4` is recommended for this and will work with both modern and older versions of netCDF files.\n\nFirst the file is read in via `nc_open()` where it is stored in a list. Note that this file is read-only so many of the other `ncdf4` functions won't work, citing an HDF Error.  Running `print()` will display a summary of the file."},{"metadata":{"trusted":true,"_uuid":"2ace9a5eac755517e9296113352ac616fa718944"},"cell_type":"code","source":"data.nc <- nc_open('../input/gpcc-monthly-precipitation-dataset-05x05/precip.mon.total.v7.nc')\nprint('NetCDF file summary is as follows:')\nprint(data.nc)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"02cc32de825253399c2472b16a6b157bbcf48d12"},"cell_type":"markdown","source":"This displays, in order:\n\n * The filepath, filename and filetype\n * A list of the measured variables with their attributes\n * A list of the dimension variables with their attributes\n * Global attributes regarding the file itself\n\nThe file has 1 measured variable, `precip`, and 4 dimension variables. These dimensions are longitude, latitude, time and the less obvious `nbnds  Size:2`. The reason for this last dimension is that there are technically two points for each latitude and longitude which combined form the four corners of a cell. Taken together these cells cover the entire Earth's surface with each one possessing a measured value for total precipitation in that area for that month.  Details are given about the attributes of each variable and dimension. This file also has 8 global attributes generally regarding its authorship and history so users can provide acknowledgement. To view details of a single feature of the file, the function `ncatt_get()` can be used:"},{"metadata":{"trusted":true,"_uuid":"178a3fa388ab1412482a075b34febc681c89b39a"},"cell_type":"code","source":"str(ncatt_get(data.nc, 'precip'))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"17b509575327f208496f9143af44ae968a4f958b"},"cell_type":"markdown","source":"Precipitation is measured in mm as observed from surface monitoring stations. The highest total rainfall (or snowfall) recorded for a single area of 0.5° long/lat is over 4.5 metres! The `missing_value` entry is particularly important. This is the code for what in R would be an `NA` value. In this case it largely refers to bodies of water where there are no ground-based stations to monitor precipitation. Typically this value would have to be replaced with `NA` in order to work with the data in R; in the case of this file R did so automatically. Otherwise `precip.a[precip.a == mv] <- NA` could quickly be used, where `mv` is the missing value code.\n\nNext the time variable can be examined. "},{"metadata":{"trusted":true,"_uuid":"d8c69f02b2fc2577bec2cd4297dd1c01e4d54127"},"cell_type":"code","source":"str(ncatt_get(data.nc, 'time'))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6e0d095702206b9928cffd6b34c513d5b9b51452"},"cell_type":"markdown","source":"The time dimension is measured in days since January 1st, 1800 and the gap between successive readings is one month. It starts at 36889 days after this date and ends at 78131 days. This unusual unit of measurement will need converting to a more accessible date format below. Note that there is no value for missing data; this implies the `time` dimension is complete. The precipitation data itself can be obtained via `ncvar_get()` as shown below."},{"metadata":{"trusted":true,"_uuid":"e15b3fe0525bd6e0e619b963ce2eed2b6b3da2f8"},"cell_type":"code","source":"precip.a <- ncvar_get(data.nc, 'precip')\nprint('Structure of precip:')\nstr(precip.a)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"02e556e3aad8bf1e0f6d52790fd307ef292c94c3"},"cell_type":"markdown","source":"`precip.a` is an array with dimensions 720 by 360 by 1356. The dimensionality of any variable in the netCDF file can also be examined by usual R subsetting, for example via `data$var[['dates']]$varsize`. \n\nThe dimension lengths are worth noting. There are in total 360° of longitude and 180° of latitude; since the resolution of this data is 0.5° there are 720 and 360 values for them respectively. The third value of 1356 is less clear. It is the total number of months of data recorded.  Since the values are stored as counts of days since Jan 1st 1800, two functions will be needed in order to use regular dates when working with this data:\n\n * A function to obtain the date from the count of days since 1800-01-01\n * A function to obtain the count of days since 1800-01-01 from a given date\n \nFirst the dimension variables themselves can be extracted as vectors via `ncvar_get()` so they can be used to subset the precipitation data. "},{"metadata":{"trusted":true,"_uuid":"16cde923f7a327e452e1c1c5faaa90a0ea93fd72"},"cell_type":"code","source":"lon <- ncvar_get(data.nc, 'lon')\nlat <- ncvar_get(data.nc, 'lat')\ndates <- ncvar_get(data.nc, 'time')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7ee64d49a935793e9c5d2f0e1d0157afba9416bf"},"cell_type":"markdown","source":"Next the date conversion functions can be written and tested. \n\n---\n<a id='3.2'></a>\n## 3.2 Conversion Functions and Subsetting\n\nThis kernel will make heavy use of the `apply()` family of functions. Their basic form is always `*apply(object, function)`  where the function is iterated over the object much like a for-loop, producing outputs that are usually (but not always) stored as a list. Loops are discouraged in R for reasons of efficiency and the vector functions are almost always the preferred method; learning how to use them is essential for any R student. In `apply()` itself a number is placed inbetween the object and function indicating the dimension number it is working across: 1 for rows, 2 for columns and so on for any additional dimensions.  This flexibility will be fully explored later in [Section 4](#4). \n\nEither one of the following functions can be used to subset `precip.a` but it is more comprehensive to have both:"},{"metadata":{"trusted":true,"_uuid":"630f0d6bb816ae48a12e50a75da5db401e18b3ea"},"cell_type":"code","source":"#turn vector of day counts since origin (default Jan 1st 1800) into dates\ndays2date <- function(v, origin='1800-01-01'){\n    origin <- as.Date(origin)\n    out <- list()\n    out <- lapply(v, function(x) seq(origin, by = paste(x, 'day'), length=2)[2])\n    do.call(c, out)           \n}\n\n#turn vector of dates into count of days since origin (default Jan 1st 1800)\ndate2days <- function(v, origin='1800-01-01'){\n    v <- as.Date(v)\n    origin <- as.Date(origin)\n    sapply(v, function(x) (x - origin)[[1]])\n}","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8cd2b61ccfc64bad9a4f92d999f99fbba5314a9a"},"cell_type":"markdown","source":"Note the line `do.call(c, out)` in `days2date()` as R does not like working with dates and will coerce a list of them to integer values if `unlist()` is used. Instead this line applies the function `c()` i.e 'put in vector' on each element of `out` while preserving the datatype.\n\nIn `date2days()` the function`sapply()` is used since it automatically reduces its output to the simplest possible object, in this case a vector as desired. To remember which `apply()` function is doing what, it helps to remember `lapply()` as 'list-apply' and `sapply()` as 'simplify-apply' in accordance with their outputs. \n\nThe temporal range of the data can now be verified; the range of values was given above as 36889 to 78131."},{"metadata":{"trusted":true,"_uuid":"7c46e4c30e50e1f72150f65f5b87bc5e30f61ebb"},"cell_type":"code","source":"print(days2date(c(36889, 78131)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7f8ac6db9dcf1062709eee27725a68758fa042ad"},"cell_type":"markdown","source":"The data begin in January 1901 and end in December 2013 as was stated in the file description so `days2date()` works correctly.  Next `date2days()` can be combined with `which()` to obtain a slice of `precip.a` for a specific date. \n\nThe reason this is necessary lies in the structure of the data. Each snapshot of global precipitation is essentially a 720 by 360 grid of the Earth's surface wherein the value of each 'pixel' is the recorded total precipitation for that month. There are 1356 of these grids, one for each month in the years 1901-2013 inclusive, which together form the 3-dimensional array `precip.a`.  Unlike dataframes there are no row or column names to simplify subsetting* so to select data for specific months, the index of those dates in `dates` must be extracted. These indices can then be used to subset `precip.a`.\n\n**It is possible via `dimnames()` to assign values to each dimension of an array for subsetting but this has significant drawbacks. All assigned values will be coerced to characters so trying to obtain a slice of latitudes such as `precip.a[,dimnames(precip.a)[2] > -15,]` will lead to unpredictable results as the compiler struggles with using numerical operators between numerics and strings. Using dates is also out of the question. In addition, these dimnames are often lost when subsetting so it really isn't worth the trouble*  "},{"metadata":{"trusted":true,"_uuid":"c4226a715c65aee279a5832ac69888e25f601560"},"cell_type":"code","source":"print('Indices of data start and end points:')\nprint(which(dates == date2days(c('1901-01-01', '2013-12-01'))))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"09debfa794c13692d445a41e474c05569e2277a4"},"cell_type":"markdown","source":"There are 1356 indices for the months in 1901 - 2013 inclusive which corresponds with the dataset description and means `date2days()` is also working. To check that the data look correct, a snapshot of January 2000 can be plotted. The following function isn't strictly neccessary but will ensure that the world map is centered on Prime Meridian rather than 180° longitude which will make it look more familiar to the reader:"},{"metadata":{"trusted":true,"_uuid":"2514ad1ae35680f4ec3dda1d1e96c35d3788b407"},"cell_type":"code","source":"#split matrix, append two halves in reverse order\nworld_map <- function(m){\n    n <- nrow(m)\n    if(n%%2!=0){\n        m <- rbind(m[ceiling(n/2):n, ], m[1:floor(n/2), ])\n    }else{\n        m <- rbind(m[(n/2+1):n, ], m[1:(n/2), ])\n    }\n    return(m)\n}\n\n#get date index for millenium, use to subset precip.a, rearrange via map_matrix \nmill.m <- world_map(precip.a[,,which(dates == date2days('2000-01-01'))])\n#matrix must be transposed before conversion to raster\nmill.r <- raster(t(mill.m))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"73bee621a3fbc75755a0751195a615287b24022e"},"cell_type":"markdown","source":"Plotting rasters via `ggplot` requires conversion to a dataframe. If being examined by themselves it is simpler to use `levelplot()` which is imported by the `rasterVis` package. The combined of settings in `useRaster`, `panel`, `interpolate` and `pretty` optimise the graphical output. The `panel.background` parameter controls what colour `NA` values will be represented with.  "},{"metadata":{"trusted":true,"_uuid":"e023a0c9770cff5aeeaa58c818bc34a078420401"},"cell_type":"code","source":"levelplot(mill.r,\n          main='World Precipitation (mm) - January 2000',\n          margin=F,\n          useRaster=T,\n          panel = panel.levelplot.raster,\n          interpolate = T,\n          pretty=T,\n          col.regions=inferno,\n          colorkey=list(space='right'),\n          #background colour = NA colour\n          par.settings = list(panel.background=list(col='#c1e7ff')),\n          scales=list(x=list(at=NULL), y=list(at=NULL)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bdfe986811d0fff8e7688d1a2850230736775bbc"},"cell_type":"markdown","source":"The plot looks as expected. The land surface of the Earth is familiar and clear while the areas of heavy rainfall/snowfall lie in tropical and coastal regions where they would be expected. With this verified the area pertinent to Syria can be extracted for study. \n\n---\n<a id='3.3'></a>\n## 3.3 Isolating the Syria Hydrological Region\n\nIn order to subset `precip.a` by longitude and latitude the coordinates must be matched to the indices in `long` and `lat`.  Note that in this file longitudes are stored between 0 and 360, not -180 to 180. \n\nTo test this, the area for South America on Jan 1st 2000 can be extracted and compared:"},{"metadata":{"trusted":true,"_uuid":"546a8ad0f590d7326a996f4a9011b93fcf017ace"},"cell_type":"code","source":"sa_lat.v <- which(lat > -60 & lat < 13.6)\nsa_lon.v <- which(lon > 260 & lon < 332)\nsa.m <- precip.a[sa_lon.v, sa_lat.v, which(dates == date2days('2000-01-01'))]","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"9dc00d86ff9c00e93ab1955dcdab1cbf16cd6542"},"cell_type":"code","source":"sa.r <- raster(t(sa.m))\n\nlevelplot(sa.r,\n          main='South America Precipitation (mm) - January 2000',\n          margin=F,\n          useRaster=T,\n          panel = panel.levelplot.raster,\n          interpolate = T,\n          pretty=T,\n          col.regions=inferno,\n          par.settings = list(panel.background=list(col='#c1e7ff')),\n          scales=list(x=list(at=NULL), y=list(at=NULL)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"703177c15f01d26b6105a04736adfdf56a7966fc"},"cell_type":"markdown","source":"Subsetting the coordinates works as intended. Now the data for the Syria Hydrological Region can be isolated."},{"metadata":{"trusted":true,"_uuid":"146aebf67efa0819a9a353d1e8454e0d2da7ba46"},"cell_type":"code","source":"syr_lon <- which(lon >= 34 & lon <= 46)\nsyr_lat <- which(lat >= 31 & lat <= 41)\nsyr.a <- precip.a[syr_lon, syr_lat, ]","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"0d6c4606a0952fa3d824331f6884f385a1e71dd7"},"cell_type":"code","source":"syr_mill.m <- syr.a[,,which(dates == date2days('2001-01-01'))]\nsyr_mill.r <- raster(t(syr_mill.m))\n#set coordinate extent of syr_mill.r\nextent(syr_mill.r) <- c(35, 43, 32, 41)\n\nlevelplot(syr_mill.r,\n          main='Syria Hydrological Region Precipitation (mm) - Jan 2000',\n          margin=F,\n          interpolate=T,\n          pretty=T,\n          col.regions=inferno,\n          par.settings = list(panel.background=list(col='#c1e7ff')),\n          xlab='Longitude', ylab='Latitude')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7797e80e829bc84a3d73be654d717acab43464f8"},"cell_type":"markdown","source":"While low in detail at this resolution it's possible to see the Mediterranean sea on the western side along with areas of high rainfall along the coastline and in the mountains of Turkey to the north. Next the parts of the raster that lie within the Syria and Tigris-Euphrates shapefiles can be isolated via the `crop()` and `mask()` functions in the `raster` package. Since the Orontes and Jordan rivers originate in Syria and flow out of it, these need not be included as the relevant parts already lie within the Syria shapefile. Once the relevant cells have been isolated for a single date and checked against the maps, `precip.a` can be subset and the precipitation data for Syria analysed.\n\nIt is important to ensure the raster has an `extent` equivalent to its geographic coordinates so it can be plotted accurately over the shapefiles. Geographic coordinates range from ±180°  longitude and ±90° latitude; since the test raster `mill.r` covers the entire Earth's surface the extent should be entered as `c(-180, 180, -90, 90)`."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"06e6acfbe26aea66b9b8617cd62baee7cdeb2138"},"cell_type":"code","source":"#load in shapefiles\nsyria.spdf <- countries.spdf[countries.spdf@data$sov_a3 == 'SYR', ]\ntig_euph.spdf <- readOGR('../input/orontes-river-basin/Aqueduct_river_basins_TIGRIS  EUPHRATES.shp')\n\n#define boundaries of raster so it can be plotted with shapefiles\nextent(mill.r) <- c(-180, 180, -90, 90)\n\n#ensure raster Coordinate Reference System is same as shapefile data\n#'+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'\ncrs(mill.r) <- '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'\n\n#isolate raster cells that fall within Syria\nsyria_cells.r <- crop(mill.r, extent(syria.spdf))\nsyria_cells.r <- mask(syria_cells.r, syria.spdf)\n\n#isolate raster cells that fall within Tigris-Euphrates river basin\neuph_cells.r <- crop(mill.r, extent(tig_euph.spdf))\neuph_cells.r <- mask(euph_cells.r, tig_euph.spdf)\n\n#merge into one raster\ntotal.r <- merge(syria_cells.r, euph_cells.r)\n\n#convert to SpatialPixels-df then df for ggplot \ntotal.spixdf <- as(total.r, 'SpatialPixelsDataFrame')\ntotal.df <- as.data.frame(total.spixdf)\ncolnames(total.df) <- c('value', 'x', 'y')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f425fce4a6d380e2de5277434144214e2a4db254","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"ggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5) +\n  #geom_tile displays the raster data that was converted to a dataframe above\n  geom_tile(data=total.df, aes(x=x, y=y, fill=value), alpha=0.6) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Raster Coverage Test: Syria and Tigris-Euphrates Basin',\n    x='Longitude',\n      y='Latitude',\n      fill='Precipitation (mm)') -> syr_euph.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9053a75c7d55206e69b63c2000cdca3548e7b6c2","_kg_hide-input":true},"cell_type":"code","source":"syr_euph.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8147cea7d42f2e24e45854c3c088710af80adb95"},"cell_type":"markdown","source":"The raster successfully covers the shapefiles. Now it must be pruned via `raster::crop()` to isolate the cells where precipitation will be draining into Syria rather than into Iraq via the southern and eastern parts of the Tigris watershed. The final stage above of converting a raster to a SpatialPixelsDataFrame then to a regular dataframe that can be plotted by `ggplot` will be repeated a lot so it's worthwhile writing a small function for it:"},{"metadata":{"trusted":true,"_uuid":"98c4a761a0743f289c9edcdbb2d1bac191bb0b59"},"cell_type":"code","source":"#function to convert raster to geom_tile-capable dataframe\n#default extent + crs are those of total.r above\nr2tile <- function(r, extent=c(35.5, 43.5, 32.5, 40),\n                  crs='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'){\n  extent(r) <- extent\n  crs(r) <- crs\n  out.df <- as.data.frame(as(r, 'SpatialPixelsDataFrame'))\n  colnames(out.df) <- c('value', 'x', 'y')\n  return(out.df)\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5c56be232196a53ca134b4cac22e9d33e3327f4f"},"cell_type":"code","source":"#manually create sub-rasters to define total region and merge\neuph1 <- crop(total.r, extent(37.5, 42, 36.5, 40))\neuph2 <- crop(total.r, extent(37, 42.5, 37, 40))\neuph3 <- crop(total.r, extent(37, 43, 37.5, 40))\neuph4 <- crop(total.r, extent(37, 43.5, 38, 40))\nfinal.r <- merge(syria_cells.r, euph1, euph2, euph3, euph4)\n\nfinal.df <- r2tile(final.r)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"64ea02662839b774660b242bf4d84b0c1c0d4c93","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"ggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.6) +\n  geom_tile(data=final.df, aes(x=x, y=y, fill=value), alpha=0.5) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title='Final Raster Coverage Test: Total Syria Watershed',\n    x='Longitude',\n      y='Latitude',\n      fill='Precipitation\\n(mm)') -> total.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"37bdcfbb2cd825bc558fecd21a13010471446847"},"cell_type":"code","source":"total.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"afee84cf1ba29f579cc489edd648af96ca2bada9"},"cell_type":"markdown","source":"The test raster now covers the total Syria Hydrological Region. This will be split into two rasters; one that covers the territory of Syria alone, and one that covers the Syria External Watershed. Setting `inverse=TRUE` in the arguments for `mask()` will return the cells that lie outside the shapefile boundary. The entire process can then be reviewed:"},{"metadata":{"trusted":true,"_uuid":"4d9d4bfb46d130d555b35e18f97033a9c336cc7f"},"cell_type":"code","source":"syr_ext.r <- mask(final.r, syria.spdf, inverse=T)\nsyr_int.r <- mask(final.r, syria.spdf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d089f20b68f1cdb821e457a30c1cc2547fb7ce5c","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"ext.df <- r2tile(syr_ext.r)\nint.df <- r2tile(syr_int.r)\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.7) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.7) +\n  geom_tile(data=total.df, aes(x=x, y=y, fill=value), alpha=0.6, show.legend=F) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Initial Raster') +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> initial.plot\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.7) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.7) +\n  geom_tile(data=final.df, aes(x=x, y=y, fill=value), alpha=0.5, show.legend=F) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Total Syria Watershed') +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> total.plot\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.7) + \n  geom_polygon(data=tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.7) +\n  geom_tile(data=int.df, aes(x=x, y=y, fill=value), alpha=0.5, show.legend=F) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection='mercator',\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Syria Internal') +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> int.plot\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.7) + \n  geom_polygon(data=tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.7) +\n  geom_tile(data=ext.df, aes(x=x, y=y, fill=value), alpha=0.5, show.legend=F) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Syria External') +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> ext.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c15444a5e96152a2e83496d16aa211c4b234e332"},"cell_type":"code","source":"grid.arrange(initial.plot, total.plot, int.plot, ext.plot, ncol=2,\n            left=grid::textGrob('Latitude', rot = 90, vjust = 1),\n            bottom=grid::textGrob('Longitude'),\n            widths=c(0.9,1))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1abebd547ebf8a39f1b53717e88b19d2bb97818a"},"cell_type":"markdown","source":"By isolating these cells from `precip.a` the historical precipitation levels of Syria can be examined. Since these rasters are irregular shapes this will take three stages:\n\n* The extent of the rasters must be used to subset `precip.a`, making arrays that cover their respective regions\n* The rasters must be converted to matrices and all non-NA values converted to 1\n* Each monthly slice of the regional arrays must be multiplied by their respective matrices\n\nThis will ensure that the values of all cells that lie within the *extent* of the rasters but which do not lie within the rasters themselves are converted to `NA` while the values that do remain unchanged. Taking the sum of each slice of the array along the date axis will then yield the monthly total precipitation for that region. Note that this process will employ standard multiplication, *not* matrix multiplication."},{"metadata":{"trusted":true,"_uuid":"2a4b8333e40cfd306a7d9b527a4e7dd9b9cf72e9"},"cell_type":"code","source":"#get extent of syria raster\ncoords <- extent(syr_int.r)\n\n#indices of cells in this range\nsyr_lon <- which(lon > coords[1] & lon < coords[2])\nsyr_lat <- which(lat > coords[3] & lat < coords[4])\n\n#full array of Syria region to this extent\nsyr.a <- precip.a[syr_lon, syr_lat,]\n\n#convert raster to matrix and transpose\ntemplate.m <- t(as.matrix(syr_int.r))\n\n#convert all non-NA values to 1\ntemplate.m[!is.na(template.m)] <- 1\n\n#apply() gives unpredictable results in this case: use lapply + simplify2array\nsyr_int.a <- simplify2array(lapply(seq_along(1:length(dates)),\n                                 function(x) syr.a[,,x]*template.m))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"de1ff1983d066021405a37a602f2f0f1f98495a1"},"cell_type":"markdown","source":"The reason `apply()` isn't used in the final stage is because instead of returning an array consisting of 1356 matrices with the dimensions of `template.m` it instead returns 1356 vectors each containing the calculated elements but without the original matrix structure. This disparity in the input/output dimensions is because`apply()` lacks an argument to strictly define what its output should look like and results can sometimes be unexpected as a consequence.  Repeatedly multiplying an array by a matrix of elements `1:NA` should display idempotency; via `apply()` it does not. A simpler workaround would be use of `plyr::aaply()` though be careful not to load in the actual library as it will conflict with the rest of `dplyr`.     \n\nTo verify that this process has worked, the data in the transformed arrays at the index for January 1st 2000 should match those of the Total Syria Watershed raster above. \n\n---\n<a id='3.4'></a>\n## 3.4 Data Verification\n\nThe data for the process above must be repeated for the exterior Syria watershed and for the total Syria watershed to ensure that the data has been correctly isolated and stored with no overlapping areas or errors in date subsetting."},{"metadata":{"trusted":true,"_uuid":"06b377fb42d4fa6084f77fde7bb5be81753c1d9e","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"#repeat process above for syr_ext.r\n#raster extent is unchanged\nsyr.a <- precip.a[syr_lon, syr_lat,]\ntemplate.m <- t(as.matrix(syr_ext.r))\ntemplate.m[!is.na(template.m)] <- 1\nsyr_ext.a <- simplify2array(lapply(seq_along(1:length(dates)),\n                                 function(x) syr.a[,,x]*template.m))\n                                   \n#repeat for total Syria watershed\nsyr.a <- precip.a[syr_lon, syr_lat,]\ntemplate.m <- t(as.matrix(final.r))\ntemplate.m[!is.na(template.m)] <- 1\nsyr_tot.a <- simplify2array(lapply(seq_along(1:length(dates)),\n                                 function(x) syr.a[,,x]*template.m))\n                                   \nsyr_crop_mill.m <- syr_int.a[,,which(dates == date2days('2000-01-01'))]\nsyr.df <- r2tile(raster(t(syr_crop_mill.m)))\n\next_crop_mill.m <- syr_ext.a[,,which(dates == date2days('2000-01-01'))]\next.df <- r2tile(raster(t(ext_crop_mill.m)))\n\ntot_crop_mill.m <- syr_tot.a[,,which(dates == date2days('2000-01-01'))]\ntot.df <- r2tile(raster(t(tot_crop_mill.m)))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3f5f7707caa7de6aa278e7fd8f1b323512d5c499","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"ggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.6) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.6) +\n  geom_tile(data=syr.df, aes(x=x, y=y, fill=value), alpha=0.5) + \n  geom_tile(data=ext.df, aes(x=x, y=y, fill=value), alpha=0.5) +\n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, \"bb\")$ur.lon),\n   ylim=c(31.5, attr(syr.map, \"bb\")$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Interior & Exterior Array Test',\n    x = 'Longitude',\n      y = 'Latitude') + \n  guides(fill=F) +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> array_intext.plot\n\n#binary values to examine coverage\nsyr.df$value[!is.na(syr.df$value)] <- 1\next.df$value[!is.na(ext.df$value)] <- 0\n\nggmap(syr.map, extent='normal', maprange=FALSE) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.6) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.6) +\n  geom_tile(data=syr.df, aes(x=x, y=y, fill=value), alpha=0.5) + \n  geom_tile(data=ext.df, aes(x=x, y=y, fill=value), alpha=0.5) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection='mercator',\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Interior & Exterior Array Coverage',\n    x = 'Longitude',\n      y = 'Latitude') + \n  guides(fill=F) +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> array_cov.plot\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.6) + \n  geom_polygon(data=tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.6) +\n  geom_tile(data=tot.df, aes(x=x, y=y, fill=value), alpha=0.5) +\n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection='mercator',\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Total Syria Array Test: Jan 2000',\n    x = 'Longitude',\n      y = 'Latitude') + \n  guides(fill=F) +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> array_tot.plot\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_polygon(data=syria.spdf, aes(x=long, y=lat, group=group), \n               fill='white', show.legend=F, alpha=0.7) + \n  geom_polygon(data = tigeuph.df, aes(x = long, y = lat,\n                               group=group),\n                         fill='white',size = 0.5, alpha=0.7) +\n  geom_tile(data=final.df, aes(x=x, y=y, fill=value), alpha=0.5, show.legend=F) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection='mercator',\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title = 'Original Raster Data: Jan 2000') +\n  theme(axis.title.x=element_blank(),\n        axis.title.y=element_blank()) -> total.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a9121fe5363a8308fae04bbea4003a76ba5fb521","_kg_hide-input":true},"cell_type":"code","source":"grid.arrange(array_cov.plot, array_intext.plot,\n             array_tot.plot, total.plot, ncol=2,\n            left=grid::textGrob('Latitude', rot = 90),\n            bottom=grid::textGrob('Longitude'))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ef392daa0401e7c132691a5c2c6726547a21c0a2"},"cell_type":"markdown","source":"The subsetting of `precip.a` into separate arrays for Syria, the external watershed and the total Syria Hydrological Region was successful. They do not overlap and the precipitation values match those of the original `precip`.  Now the precipitation data for each one, and in total,  can be analysed. This process may seem laborious but it is necessary to ensure that the data examined only contains values for the regions relevant to Syria, contains no overlaps (i.e duplicate data) and matches the dates in the original file. Even a small error would compromise the validity of any final conclusions.\n\n---\n<a id='4'></a>\n# 4 Syria Precipitation Data Analysis\n\n<a id='4.1'></a>\n## 4.1 Dataframe Construction\n\nThe three arrays containing the precipitation values for the Syrian interior, exterior and total watersheds must now be converted to dataframes in order to be plotted.  Obtaining a total volume for precipitation in cubic metres is complicated by the curvature of the Earth which means cells at different latitudes will have different areas. Since precipitation is measured per unit of area, it is simpler to sum the precipitation values for each region and divide by the number of cells in that region, in effect taking their average.  So the precipitation value for each region in each month is the mean of their constituent cells; adding them by month will yield the yearly total for that region.\n\nTo begin with three dataframes will be made containing the mean precipitation values for each array per month. This is achieved via `apply()`  which will yield a vector. This vector can be used to fill a matrix with 12 rows and transposed so it can be placed in a dataframe where each row will contain the monthly precipitation for that year. The reason for the transposition is because elements of a matrix are filled downwards by column rather than across by row. Once in a dataframe, columns can be added for the year and its total precipitation. \n"},{"metadata":{"trusted":true,"_uuid":"61c93bd1ff18d50b76cb029586dd3b30def99b25"},"cell_type":"code","source":"#obtain mean precipitation for each month in a vector\n#apply() uses the function mean() over dimension 3, the time dimension\nint_pp.v <- apply(syr_int.a, 3, mean, na.rm=T)\n\n#make matrix of yearly values - remember matrices enter data by column, not row\nint_pp.m <- matrix(int_pp.v, nrow=12)\n\n#convert to dataframe after transposing\nint_pp.df <- as.data.frame(t(int_pp.m))                  \n\n#column names for dataframe\nmonths.v <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n             'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')\n\n#isolate all individual years covered by data as a vector\nyears.v <- as.numeric(unique(substring(days2date(dates), 1, 4))) \n\n#add column names, match year to values, obtain total for each year\nnames(int_pp.df)[1:12] <- months.v\nint_pp.df[['Year']] <- years.v\nint_pp.df[['Total']] <- (rowSums(int_pp.df[, 1:12]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0ef241f878e82ecc7fb0b3865a28cbbb1edc6332"},"cell_type":"markdown","source":"This process is repeated for the Syria Exterior Watershed and the Syria Hydrogical Region. The data can then be analysed."},{"metadata":{"trusted":true,"_uuid":"f83b4af9850ab310f6c1d99666ec69082fa53942"},"cell_type":"code","source":"ext_pp.v <- apply(syr_ext.a, 3, mean, na.rm=T)                  \next_pp.m <- matrix(ext_pp.v, nrow=12)                  \next_pp.df <- as.data.frame(t(ext_pp.m))  \nnames(ext_pp.df)[1:12] <- months.v             \next_pp.df[['Year']] <- years.v\next_pp.df[['Total']] <- (rowSums(ext_pp.df[, 1:12]))\n\ntot_pp.v <- apply(syr_tot.a, 3, mean, na.rm=T)                  \ntot_pp.m <- matrix(tot_pp.v, nrow=12)                  \ntot_pp.df <- as.data.frame(t(tot_pp.m))  \nnames(tot_pp.df)[1:12] <- months.v\ntot_pp.df[['Year']] <- years.v\ntot_pp.df[['Total']] <- (rowSums(tot_pp.df[, 1:12]))\n\n\nprint('Syria Hydrological Region dataframe: first few rows')                  \nhead(tot_pp.df[, c(13:14, 1:12)])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b0abdcf34277fbf029bc9f2e28336ea36300476"},"cell_type":"markdown","source":"---\n<a id='4.2'></a>\n## 4.2 Mean Precipitation by Month\nHow precipitation varies across the course of the average year can now be examined. Finding the average of each month can be done fastest via the base function `colMeans()`"},{"metadata":{"trusted":true,"_uuid":"69cf42f4bbb800b351b05b626410ae512d996d32"},"cell_type":"code","source":"int_mon.v <- colMeans(int_pp.df[,1:12])\next_mon.v <- colMeans(ext_pp.df[,1:12])\n\nmon.df <- data_frame(Region = c(rep('Syria Interior', 12), rep('External Watershed', 12)),\n                    Month = rep(factor(months.v, levels=months.v), 2), \n                    Precipitation = c(int_mon.v, ext_mon.v))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"60c540db02a64233425a21dbe6ce0c72d30a8ff1","_kg_hide-input":true},"cell_type":"code","source":"ggplot(mon.df, aes(x=Month, y=Precipitation, fill=Region)) +\n  geom_bar(stat='identity', position='dodge') +\n  theme_bw() +\n  labs(title='Syria Hydrological Region: Mean Precipitation by Month',\n      y='Precipitation (mm)') +\n  scale_y_continuous(expand=c(0, 0, 0, 5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8409dca98d38281cbc16ed4ee732562e12bbd7e1"},"cell_type":"markdown","source":"Precipitation across the Syria Hydrological Region is highest during Winter and lowest during Summer; in particular within the borders of Syria there is almost no rainfall whatsoever during July and August. During this period Syria will be especially reliant on water from the Euphrates.\n\nThe average monthly precipitation for each cell can be calculated since `apply()` can also operate on a vector of dimensions, in this case `c(1,2)`:"},{"metadata":{"trusted":true,"_uuid":"8012b6a4dc685ce58b0f949f1ba1eb4ad1d0ec2e"},"cell_type":"code","source":"av.m <- apply(syr_tot.a, c(1,2), mean)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"trusted":true,"_uuid":"1400ea1ae1816a378aeba38fddf13a2515966262"},"cell_type":"code","source":"av.r <- raster(t(av.m))\nextent(av.r) <- coords\nav.df <- r2tile(av.r)\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_tile(data=av.df, aes(x=x, y=y, fill=value), alpha=0.8) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection='mercator',\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title='Average Monthly Precipitation for Syria Hydrological Region',\n    x='Longitude',\n      y='Latitude',\n      fill='Precipitation (mm)',\n      caption='Source: GPCC 1901-2013 Monthly Precipitation') -> av.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0a06f4d4daa396e31818dc3326c58bb7278fbcfd"},"cell_type":"code","source":"av.plot","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"45ae13c300ed72743281c09911f2e248cb22ae9a"},"cell_type":"markdown","source":"The Syrian interior displays far lower precipitation levels than the coast and the northern border with Turkey. Precipitation levels within Turkey are relatively much higher, illustrating how vital the Euphrates is for Syria's water requirements. \n\n---\n<a id='4.3'></a>\n## 4.3 Precipitation by Year"},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"7754bf68abb3003cd1c118efc7646a90e044361d"},"cell_type":"code","source":"int_mean <- mean(int_pp.df$Total)\next_mean <- mean(ext_pp.df$Total)\ntot_mean <- mean(tot_pp.df$Total)\n\nggplot(int_pp.df, aes(y=Total, x=Year, colour=Total)) +\n  geom_point() +\n  geom_line(colour='black', size=0.2) +\n  geom_smooth(method='loess', se=F, size=0.5) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='Syria Internal Precipitation by Year',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_hline(colour='red', yintercept=int_mean) +\n  geom_point(x=1975, y=600, colour='red', fill='red',\n             shape=22, size=5) +\n  annotate(geom='text', label='1901-2013 Mean', x=1990, y=600) +\n  geom_point(x=1975, y=570, colour='blue', fill='blue',\n             shape=22, size=5) +\n  annotate(geom='text', label='LOESS Regression Line', x=1995, y=570) +\n  theme(legend.position='none') +\n  scale_y_continuous(breaks=c(100, 200, 308, 400, 600),\n                    labels=c(100, 200, 308, 400, 600))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"55b5d3652d1dd281e5c12e50eb5f1744807bd228"},"cell_type":"markdown","source":"The yearly precipitation data for Syria display two immediate trends. The first is that during the period recorded, expected precipitation levels have steadily decreased by around a third. This observation must be treated with caution as the accuracy and reliability of scientific instrumentation has improved since the data were first recorded. More conservatively, expected yearly precipitation across Syria post-1950 has decreased by around 50mm. The second trend is that precipitation is prone to large swings about the mean between successive years. In fact differences of over 1 standard deviation in precipitation levels between successive years occured more than 40% of the time. This would indicate that water supplies in Syria are susceptible to large, unpredictable and short-term fluctuations in domestic rainfall. Next it can be seen if this trend persists in the Euphrates basin section that feeds Syria."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"bbff909adb3d42cea844b5e7a1a498a0aa69beed"},"cell_type":"code","source":"ggplot(ext_pp.df, aes(y=Total, x=Year, colour=Total)) +\n  geom_point() +\n  geom_line(colour='black', size=0.2) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='Syria External Watershed Precipitation by Year',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_hline(yintercept=ext_mean, colour='red') +\n  geom_smooth(method='loess', se=F, size=0.5) +\n  geom_point(x=1975, y=850, colour='red', fill='red',\n             shape=22, size=5) +\n  annotate(geom='text', label='1901-2013 Mean', x=1990, y=850) +\n  geom_point(x=1975, y=820, colour='blue', fill='blue',\n             shape=22, size=5) +\n  annotate(geom='text', label='LOESS Regression Line', x=1995, y=820) +\n  theme(legend.position='none') +\n  scale_y_continuous(breaks=c(400, 500, 584, 600, 700, 800),\n                    labels=c(400, 500, 584, 600, 700, 800))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bac760ce9e7251c4b4073726e5394606a9793525"},"cell_type":"markdown","source":"The gradual decrease in precipitation levels evident in Syria is far less pronounced for the external watershed. The yearly expected value has also decreased by around 50mm since 1950 but baseline levels are much higher than the Syrian interior and for the period recorded the average precipitation is nearly twice as large as that of Syria proper. The trend of large swings in precipitation between successive years is even more pronounced than it was for Syria; in over 48% of cases it changed by over 1 standard deviation. For the entire Syria Hydrological Region:"},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"ad137fbbeae2a94398026092f87077237e7ef089"},"cell_type":"code","source":"ggplot(tot_pp.df, aes(y=Total, x=Year, colour=Total)) +\n  geom_point() +\n  geom_line(colour='black', size=0.2) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='Syria Hydrological Region Precipitation by Year',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_hline(yintercept=tot_mean, colour='red') +\n  geom_smooth(method='loess', se=F, size=0.5) +\n  geom_point(x=1975, y=675, colour='red', fill='red',\n             shape=22, size=5) +\n  annotate(geom='text', label='1901-2013 Mean', x=1990, y=675) +\n  geom_point(x=1975, y=650, colour='blue', fill='blue',\n             shape=22, size=5) +\n  annotate(geom='text', label='LOESS Regression Line', x=1995, y=650) +\n  theme(legend.position='none')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"91822a4e44c5cc686b0bb713b88245c322770aad"},"cell_type":"markdown","source":"As it is composed of the two areas above, the Syria Hydrological Region displays the same trends. Again, caution should be taken when considering the earlier data due to the use of less advanced instrumentation. \n\nThe data so far has considered individual years so it may be instructive to examine long-term trends by breaking the data down by decade.\n\n---\n<a id='4.4'></a>\n## 4.4 Precipitation by Decade\n\nLarge yearly swings in precipitation levels are clearly common in Syria. To examine aggregate data by decade instead a new dataframe `dec.df` can be constructed that summarises these yearly values. The geographic distribution of any changes with respect the average decade can then be shown in a raster plot.\n\nThis will require splitting the vectors of monthly precipitation values into blocks of length 120 which can then be used to subset the array. A generic function that splits a vector into chunks of a given length doesn't exist in R so one must be written. Note that you can conditionally exit a function with an error message of your choosing via `if(condition){stop('custom error message')}` which will help with debugging when using functions of your own design within larger codeblocks. In this case it will throw an error if the vector length is not divisible by the 'chunk' length."},{"metadata":{"trusted":true,"_uuid":"f14969274dcf74988ebd036c855bc453fe61394b"},"cell_type":"code","source":"#function to split vector into chunks of length n (outputs list of vectors)\nvsplit <- function(v, n){\n    if(length(v)%%n!=0){stop('vector length must be multiple of n')}\n    m <- matrix(v, nrow=n)\n    lapply(1:ncol(m), function(x) m[,x])\n}","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"17962bacf3734f084b55e3fa2da79b84187ba216"},"cell_type":"markdown","source":"For cases where the vector is not a multiple of the desired length, `vsplit2()` in the hidden code block below can be used. It will again return a list of length-n vectors, except the final vector will be truncated to its actual length instead of being filled with repeated values until it is also length-n. Bear in mind that it is around 4 times slower that `vsplit()`."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"ef09819da51454e6c9fc68482b8367a13639d25e"},"cell_type":"code","source":"vsplit2 <- function(v, n){\n    m <- suppressWarnings(matrix(v, nrow=n))\n    out.l <- lapply(1:ncol(m), function(x) m[,x])\n    if(length(v)%%n!=0){\n        x <- out.l[[length(out.l)]][1:(length(v)%%n)]\n        out.l[[length(out.l)]] <- x\n    }\n    return(out.l)\n}  ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cefdd2ceffc093b4dc932e6d6317589b4321da15"},"cell_type":"markdown","source":"The dataframe for precipitation can now be constructed using `vsplit()`."},{"metadata":{"trusted":true,"_uuid":"d6f79fb516dda4661d58573a0955e84ee5be3d9f"},"cell_type":"code","source":"#list of vectors of decade indices\ndec_index.l <- vsplit(1:1320, 120)\n#sum for each decade: sapply will automatically reduce output to vector\ndec_pp.v <- sapply(dec_index.l, function(x) sum(tot_pp.v[x]))\ndec_mean <- mean(dec_pp.v)\n\n#challenge - see if you can work out what these lines do!\nyears.v <- vsplit(unique(substr(days2date(dates[1:1320]), 1, 4)), 10)\ndec.v <- sapply(years.v, function(x) paste(x[1], x[10], sep='-\\n'))\n                \ndec.df <- data_frame(Decade=dec.v, Precipitation=dec_pp.v)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"trusted":true,"_uuid":"621cd1bfd9e638400efa1fa98d8bfbdc4152433e"},"cell_type":"code","source":"ggplot(dec.df, aes(x=Decade, y=Precipitation, group=1)) +\n  geom_point(aes(colour=Precipitation), size=5, show.legend=F) +\n  geom_line(colour='black') +\n  theme_bw() +\n  scale_colour_viridis() +\n  labs(title='Precipitation in Syria Hydrological Region by Decade',\n       y='Precipitation (mm)')+\n  geom_hline(yintercept=dec_mean, colour='red') +\n  scale_y_continuous(breaks=c(3000, 3500, 4000, 4437, 4500, 5000, 5500),\n                    labels=c(3000, 3500, 4000, 'Decade\\nMean', 4500, 5000, 5500)) ","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"3802cf87f0b999696f31cce7df6985a9faf263f8"},"cell_type":"code","source":"ggplot(dec.df, aes(x=Decade, y=Precipitation, fill=Precipitation)) +\n  geom_bar(stat='identity', show.legend=F) +\n  theme_bw() +\n  labs(title='Precipitation in Syria Hydrological Region by Decade',\n       y='Precipitation (mm)')+\n  geom_hline(yintercept=dec_mean, colour='red') +\n  scale_y_continuous(breaks=c(0, 1000, 2000, 3000, 4000, 4437, 5000),\n                    labels=c(0, 1000, 2000, 3000, 4000, 'Decade\\nMean', 5000),\n                    expand=c(0, 0, 0, 500)) ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"04ce4ad6550bea3e52bf36514a68f3b0464d9c3f"},"cell_type":"markdown","source":"The older values may have skewed the rest of the data but the years 2001-2010 showed the lowest precipitation of any decade recorded, the only one with a total precipitation of under 4000mm. The average yearly precipitation by cell for that decade by area can now be examined to the total average."},{"metadata":{"trusted":true,"_uuid":"c7330b6de6d212bbdeeae2f42354b18edd3ecffa","_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"dec_min.a <- syr_tot.a[,,which(dates==date2days('2001-01-01')):\n                       which(dates==date2days('2010-12-01'))]\ndec_min.m <- apply(dec_min.a, c(1,2), mean, na.rm=T)\n\ndec.r <- raster(t(dec_min.m))\nextent(dec.r) <- coords\ndec.r <- 100*(dec.r - av.r)/av.r\ndec.df <- r2tile(dec.r)\n\nggmap(syr.map, extent='normal', maprange=F) + \n  geom_tile(data=dec.df, aes(x=x, y=y, fill=value), alpha=0.8) + \n  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n                         fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n            aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n  coord_map(projection=\"mercator\",\n   xlim=c(34, attr(syr.map, 'bb')$ur.lon),\n   ylim=c(31.5, attr(syr.map, 'bb')$ur.lat)) +\n  scale_fill_viridis() +\n  labs(title='2001-2010 Monthly Precipitation: Percent Deviation from Average',\n    x='Longitude',\n      y='Latitude',\n      fill='Precipitation\\nDifference (%)',\n      caption='Source: GPCC 1901-2013 Monthly Precipitation') -> dec_min.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7e6a7c987893ed470976de5382fea723648e3cba","_kg_hide-input":true},"cell_type":"code","source":"dec_min.plot","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b64ee4070480a4d83dec979ab742b879c7886624"},"cell_type":"markdown","source":"Monthly mean precipitation during 2001-2010 was below average for almost every section of the SHR but there is a pronounced divergence in this trend between the Syrian interior and the external watershed. The Turkish side of the Euphrates river basin didn't see a large decline in precipitation levels but the Syrian interior did. Quantifying this difference:"},{"metadata":{"trusted":true,"_uuid":"5997e6c09771261adc25f20abac42f93585c214c"},"cell_type":"code","source":"#vector of Syria precipitation by decade\ndecint_pp.v <- sapply(dec_index.l, function(x) sum(int_pp.v[x]))\ndecint_mean <- mean(decint_pp.v)\n                      \n#vector of Syria External Watershed precipitation by decade\ndecext_pp.v <- sapply(dec_index.l, function(x) sum(ext_pp.v[x]))\ndecext_mean <- mean(decext_pp.v)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"ec1f9cbaa9162ed7a561201abe9202db1168ad3d"},"cell_type":"code","source":"decintext.df <- data_frame(Decade = rep(dec.v, 2),\n                           Region = c(rep('Syria Interior', 11),\n                                     rep('External Watershed', 11)),\n                           Precipitation = c(decint_pp.v, decext_pp.v))\n\nggplot(decintext.df, aes(x=Decade, y=Precipitation, fill=Region)) +\n  geom_bar(stat='identity', position='dodge') +\n  theme_bw() +\n  labs(title='Total Precipitation in Syria & External Watershed by Decade',\n       y='Precipitation (mm)')+\n  geom_hline(yintercept=decint_mean) +\n  geom_hline(yintercept=decext_mean) +\n  scale_y_continuous(breaks=c(1000, 2000, 3088, 4000, 5000, 5845),\n                    labels=c(1000, 2000, 'Syria Internal\\nMean: 3088',\n                             4000, 5000, 'Syria External\\nMean: 5845'),\n                     #leave margin only at top of y axis\n                    expand=c(0, 0, 0, 500)) ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"451aea559df63362924089bbefaf191d09bec1e1"},"cell_type":"markdown","source":"While total precipitation in 2001-2010 was below average in the Syria External Watershed, it was to a lesser extent than in the Syrian Interior. Respectively precipitation levels were 93.5% of the mean for the external watershed and 81.6% of the mean for the Syrian interior. Syrian reliance on the Euphrates for its water supply will have increased during this period barring other factors.\n\n---\n<a id='4.5'></a>\n## 4.5 Rolling 5-Year Mean Precipitation\n\nIt is apparent from the yearly total precipitation data that large variations in rainfall between successive years are commonplace. To obtain a clearer sense of the broad trends in precipitation levels a rolling mean can be examined. This will smooth the data and make sustained periods of low rainfall i.e drought more apparent. A quick application of `stats::filter` can be used to obtain this.  If you've worked with the `tidyverse` package you may have noticed the warning that `dplyr::filter()` masks that of `stats` so make sure you access the right one.   "},{"metadata":{"trusted":true,"_uuid":"d633816cb45900682bc24bf7be12881dcf66bc0e"},"cell_type":"code","source":"rollmean <- function(x,n=5){\n    as.numeric(stats::filter(x,rep(1/n,n), sides=1))\n}","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"29dace5e714d918396e3cadc533921cece6979f3"},"cell_type":"code","source":"int_pp.df[['RollMean']] <- rollmean(int_pp.df$Total, n=5)\next_pp.df[['RollMean']] <- rollmean(ext_pp.df$Total, n=5)\ntot_pp.df[['RollMean']] <- rollmean(tot_pp.df$Total, n=5) \n\nggplot(int_pp.df, aes(y=RollMean, x=Year, colour=RollMean), na.rm=T) +\n  geom_point(show.legend=F, na.rm=T) +\n  geom_line(colour='black', size=0.25, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='5-Year Mean Precipitation: Syria Interior',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=400, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=400, colour='red') ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"367f135efe22e69b5f5d24803f1acfe015696f9b"},"cell_type":"markdown","source":"The years 2006 to 2010, immediately preceding the outbreak of hostilities in Syria, saw the lowest 5-year mean precipitation since 1958-1962 which preceded the 1963 regime change that led to the creation of the modern Syrian state. The 5-year mean continued to decrease in 2011 as the conflict began and escalated. The general trend since records began is a decrease in the 5-year precipitation average."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"e2f47d0e8c48f5c005ac32965c49e87536b5dd03"},"cell_type":"code","source":"ggplot(ext_pp.df, aes(y=RollMean, x=Year, colour=RollMean)) +\n  geom_point(na.rm=T, show.legend=F) +\n  geom_line(colour='black', size=0.2, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='5-Year Mean Precipitation: Syria External Watershed',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=685, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=685, colour='red') +\n  scale_x_continuous(breaks=seq(1900, 2010, 10),\n                    minor_breaks=NULL)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"589b410e1710ef41ca71b2bc1269c6bfafaa0d85"},"cell_type":"markdown","source":"The same data for the External Watershed do not exhibit the same patterns. While total precipitation as seen above in section 4.4 did decline, the consistent negative trend in 5-year rolling mean precipitation levels for the Syrian interior is not so evident for the external watershed. The 2011 civil war does not coincide with a period of unusually low 5-year rolling mean precipitation levels although the 1963 regime change did."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"a32079243e8fd07d24725f1e9ecf2065db06d856"},"cell_type":"code","source":"ggplot(tot_pp.df, aes(y=RollMean, x=Year, colour=RollMean)) +\n  geom_point(na.rm=T, show.legend=F) +\n  geom_line(colour='black', size=0.25, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='5-Year Mean Precipitation Syria Hydrological Region',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=550, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=550, colour='red') +\n  scale_x_continuous(breaks=seq(1900, 2010, 10),\n                    minor_breaks=NULL)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f0fae73a331df2643958250d17ae9be435da8193"},"cell_type":"markdown","source":"The lowest ever recorded 5-year mean precipitation for the SHR was in 1962 preceding the 1963 Syrian regime change. In contrast the years leading up to the 2011 Syrian Civil War did not individually exhibit historically low values. However they did form a cluster of several successive years of relatively low values which is somewhat unusual and may be significant in a rolling mean covering a longer period.\n\nThe trends identifed so far with regard to yearly total precipitation, decade total precipitation and 5-year rolling mean precipitation all indicate that precipitation within Syrian borders was characterised by a general decline since records began, large variations between successive years and sporadic periods of drought. Two of these periods have immediately preceded internal disruption in Syria. Data for the same periods regarding the Syria External Watershed Syria have also displayed these trends but to a much smaller degree.\n\nIndividual decades have been analysed but to examine every successive ten-year period the 10-year rolling mean can also be calculated and plotted.\n\n---\n<a id='4.6'></a>\n## 4.6 Rolling 10-Year Mean Precipitation "},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"c36b05076307a7e2ed5963f50de08ecf08f6a6f7"},"cell_type":"code","source":"int_pp.df[['RollMean']] <- rollmean(int_pp.df$Total, n=10)\next_pp.df[['RollMean']] <- rollmean(ext_pp.df$Total, n=10)\ntot_pp.df[['RollMean']] <- rollmean(tot_pp.df$Total, n=10) \n\nggplot(int_pp.df, aes(y=RollMean, x=Year, colour=RollMean), na.rm=T) +\n  geom_point(show.legend=F, na.rm=T) +\n  geom_line(colour='black', size=0.25, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='10-Year Mean Precipitation: Syria Interior',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=400, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=400, colour='red') ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a65416a4a4b9ef7137ffba8e8e1310e7645f0ac5"},"cell_type":"markdown","source":"The lowest ever 10 year mean for internal precipitation occured in 2008, a few years before the civil war. Prior to the 1963 regime change there was a sharp dip in the 10-year mean, which hit its nadir in 1964 before recovering by the end of the decade. Since then there has been a general decline in the 10-year mean until its new low in 2008. Barring 1964, the years 2006-2013 comprised 8 of the 10 years with the lowest recorded 10-year mean precipitation, reiterating how unusually low precipitation has been within Syria in recent years."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"bbba7446ba4932dcd3775a58e7c1571a4e5880c7"},"cell_type":"code","source":"ggplot(ext_pp.df, aes(y=RollMean, x=Year, colour=RollMean), na.rm=T) +\n  geom_point(show.legend=F, na.rm=T) +\n  geom_line(colour='black', size=0.25, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='Precipitation 10-Year Mean: Syria External Watershed',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=650, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=650, colour='red') ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"13707f8f4f3abbd5b0920ff660c98a080cc7a0fb"},"cell_type":"markdown","source":"The same data for the Syria External Watershed shows that in 1999-2008 it had the lowest mean precipitation of any 10-year period in its recorded history. This is significant because there is a delay between the time of precipitation and the point at which it flows into a river as groundwater. This length of time varies according to such factors as the distance of the precipitation from the river and the type of soil or porous rocks it must drain through. Data for the length of time this process takes throughout the Euphrates watershed is not available in this kernel. However it is conceivable that the unusually low precipitation across it in the years up to and including 2008 may have manifested in later months or even years as a decreased rate of flow in the Syrian Euphrates, exacarbating any water shortages caused by the low domestic precipitation at that time."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"cb2773fa396262e0d107b83a4f4445b1d14b19c4"},"cell_type":"code","source":"ggplot(tot_pp.df, aes(y=RollMean, x=Year, colour=RollMean), na.rm=T) +\n  geom_point(show.legend=F, na.rm=T) +\n  geom_line(colour='black', size=0.25, na.rm=T) +\n  scale_colour_viridis() +\n  theme_bw() +\n  labs(title='Precipitation 10-Year Mean: Syria Hydrological Region',\n      y='Precipitation (mm)',\n      x='Year') +\n  geom_vline(xintercept=2011, colour='red') +\n  geom_vline(xintercept=1963, colour='red') +\n  annotate('text', label='1963 Syrian\\nRegime Change',\n           x=1950, y=520, colour='red') +\n  annotate('text', label='2011 Syrian\\nCivil War',\n           x=2000, y=520, colour='red') ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5904e9228cc95c7c7229336c411b238ce4c929ea"},"cell_type":"markdown","source":"Across the total SHR the 10-year mean precipitation fell consistently after 2005 and hit a record low in 2008. With the exception of 1964, the only years prior to the outbreak of war with a 10-year mean precipitation of less than 400mm were the years 2006-2010 inclusive. This reiterates how unusually dry conditions across the SHR were during this time.\n\n---\n<a id='4.7'></a>\n## 4.7 Animation: Buildup to the Syrian Civil War\n\nAnimations can provide unique insights into regional and temporal variations in data that might otherwise be missed through aggregated methods like the above. At the time of writing the current `gganimate` package cannot be used on Kaggle and has been through some important changes since prior releases which will be covered in the [Appendix](6.1). But this section will show the data preparation and output for an animation of the yearly total precipitation in each raster cell across the Syria Hydrological Region for the twelve years 2000 to 2011 inclusive.\n\nThis has a few steps but broken down is simpler than it looks. The stages of the process are:\n\n* Isolate an array of data for the 12 years from `syr_tot.a` (the SHR subset of `precip.a`)\n* Split it into 12 arrays that have length 12 on the date axis (i.e one array for each year)\n* For each cell in each array find the total precipitation and store these 12 matrices in the list `prewar_yr.lm` \n* Repeat this process for every year in `syr_tot.a` for the total yearly precipitation of each cell for each year\n* Take the mean of these, reducing it to a single matrix of the mean yearly precipitation of each cell\n* Subtract the yearly average precipitation matrix from each matrix in `prewar_yr.lm`\n* Convert these 12 matrices to data frames that can be plotted by `geom_tile()`\n* Append them into one dataframe and add a column specifiying what year each measurement is for\n* Use this dataframe to provide the 12 frames for gganimate, which will also apply some graphical interpolation "},{"metadata":{"trusted":true,"_uuid":"fe045d16d24d22df9496f347ed254be7fe6a0d72"},"cell_type":"code","source":"#isolate years 2000-2011\nprewar.a <- syr_tot.a[,,which(dates==date2days('2000-01-01')):\n                  which(dates==date2days('2011-12-01'))]\n\n#split array along date axis, obtain yearly precip sum for each cell\nyearsplit.l <- vsplit(1:dim(prewar.a)[3], 12)\nprewar.l <- lapply(yearsplit.l, function(x) prewar.a[,,x])\nprewar_yr.lm <- lapply(prewar.l, function(x) apply(x, 1:2, sum))\n\n#do the same to total Syria array for mean yearly sum of each cell\nyearsplit.l <- vsplit(1:dim(syr_tot.a)[3], 12)\nyearly.l <- lapply(yearsplit.l, function(x) syr_tot.a[,,x])\nyearly.a <- simplify2array(lapply(yearly.l, function(x) apply(x, 1:2, sum)))\n#reduce to single matrix by finding cell mean                                   \nyearmean.m <- apply(yearly.a, 1:2, mean)\n\n#function to find matrix percentage difference from other matrix\nmdiff <- function(m, comp){\n    100*(m-comp)/comp\n}\n\n#percentage difference from mean of each matrix in prewar_yr.lm\nprewar_diff.lm <- lapply(prewar_yr.lm, mdiff, comp=yearmean.m) \n                         \n#quick modification of r2tile() to work on matrix directly                         \nm2tile <- function(m){\n    r2tile(raster(t(m)))\n}\n                         \n#turn list of matrices into list of dataframes for geom_tile()\nprewar.ldf <- lapply(prewar_diff.lm, m2tile)\n#compile into one dataframe                         \nprewar.df <- do.call(rbind, prewar.ldf)\n\n#function to repeat each element in vector n times\nvec_n <- function(v, n){\n    unlist(lapply(v, function(x) rep(x, n)))\n}\n                                        \n#add year column to dataframe for gganimate() \nprewar.df[['Year']] <- vec_n(2000:2011, nrow(prewar.ldf[[1]]))  \n                     \n#first few lines of final dataframe, ready for animating\nhead(prewar.df)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"da53d5288b56b4bdc80791e951aa3ae095f0d87c"},"cell_type":"markdown","source":"The `ggplot` code for the following animation is available in the appendix. There are some interesting features that weren't apparent in the analysis so far, for example that the east of Syria saw unusually high precipitation during 2006. Other features corroborate what was identified above - precipitation across the SHR and particularly in Syria itself was unusually low in the years prior to and including 2011 when the war broke out.  2008 in particular was an exceptionally dry year.\n\n![](https://media.giphy.com/media/24m74PUwE31rzvWQJX/giphy.gif)\n\n---\n<a id='5'></a>\n# 5 Conclusions\nUsing data from the GPCC 1901-2013 Monthly Precipitation dataset and the CEO Water Mandate 2016, it was found that:\n\n* Over the course of the average year, precipitation within Syria peaks in Winter and falls close to 0 during the Summer. The external Tigris-Euphrates watershed follows a similar pattern with precipitation consistently high throughout the year except for the months June-September, albeit with minimum values far higher than those of Syria.\n* Within Syria precipitation is concentrated toward the west coast and northern border with Turkey. The external watershed has a mean annual precipitation approximately double that of Syria itself.\n* Yearly precipitation across Syria and the Syria Hydrological Region as a whole is prone to large variations between successive years. In more than 40% of cases the yearly swing is over 1 standard deviation of the yearly precipitation distribution as a whole. This heightens the need for consistent sources of water via the Euphrates and the lakes created from damming it.\n* Since records began the long-term trend has been a decline in yearly precipitation levels across Syria, with the 2013 expected value via LOESS regression falling by approximately 50mm since 1950 and 100mm since 1930.\n* This trend is also evident in data for the same period across the external watershed, albeit to a smaller degree.\n* Since records began in 1901, the years 2001-2010 had the lowest total precipitation of any decade for both Syria and its external watershed. In Syria it 81.6% of the mean; for the external watershed it was 93.5% of the mean. \n* Throughout this decade, precipitation levels were markedly below average in all regions apart from the Syrian west coast and the northern parts of the external watershed.\n* **Within Syria the five years 2006 to 2010, immediately preceding the start of the 2011 Syrian Civil War, had the lowest mean precipitation of any five-year period since 1958-1962 which preceded the 1963 regime change that created the modern Syrian state.**\n* **For the entire Syria Hydrological Region the years 1999 to 2008 inclusive had the lowest mean precipitation of any ten-year period since records began.** Despite the widespread use of dams this may have placed excessive strain on Syria's ability to meet its water requirements.\n\nThe data, maps and observations herein may hopefully be of use in conjunction with other data sources to help clarify the conditions that led to social unrest in Syria. **The final conclusion of this study is that in the ten years leading up to the outbreak of the Syrian Civil War, precipitation levels both in Syria, and within the watershed of rivers and tributaries that flow into Syria, were significantly below the historical trend.**\n\n---\n<a id='6'></a>\n# 6 Appendix\n<a id='6.1'></a>\n## 6.1 Notes on gganimate\n\nAt the time of writing the `gganimate` package does not work on kaggle notebooks although older versions may work in RMarkdown scripts. `gganimate` is currently going through some profound changes to its API. In its original form`aes(frame = variable)` was used in `ggplot` to tell `gganimate` what dataframe variable controlled the order of frames in an animation but this has been deprecated, so the few online guides available are largely out of date. The github page has some examples of how the new version works: [https://github.com/thomasp85/gganimate ](http://) and shows how it incorporates the `tweenr` package to smooth the transition between frames for aesthetic purposes.\n\nTo use the latest version you will have to work offline in RStudio. If this seems like a pain, remember that you won't always be able to do your work on Kaggle and knowing how to use offline IDEs for data analysis is a vital skill! The Anaconda distribution is free and will install RStudio, Jupyter, the Spyder IDE for python and a number of other useful tools and libraries to get you started along with a user-friendly interface: [www.anaconda.com/download/](http://)\n\nSince `gganimate` isn't ready for CRAN release it is a bit unpolished for now. It won't immediately work with the latest versions of R so a few other packages need to be installed. First the latest version of RTools will have to be installed - since it sometimes isn't recognised by R 3.5.1 it should installed using this guide here: [stackoverflow.com/questions/50034966/no-rtools-compatible-with-r-version-3-5-0-was-found](http://)\n\nRemember to close all programs that use R and restart them before testing the RTools installation on the command line with `find_rtools()`.  The Task Manager can be used to ensure that nothing is running R before restarting everything. Next the package `devtools` will have to be installed and loaded so that the relevant packages can be downloaded from github. These packages are `pkgbuild`, `transformr` and finally `gganimate` via `devtools::install_github('thomasp85/gganimate')`. It can be a tedious process and you will likely have some hiccups just like I did. But that's programming - we have to get used to steep learning curves!\n\nIf you get `gganimate` to successfully work then be warned that documentation is sparse and setting parameters can be a matter of trial and error. Searching through the issues log [here](https://github.com/thomasp85/gganimate/issues) will help you get used to its various features via the examples left by other users. You will be working at the cutting edge of R development! As a final note, the gifs outputted by `gganimate` can be quite large since they aren't optimised for size and can often lie in the 10MB range. I recommend downloading or using an online gif optimiser. They can reduce the size dramatically without any loss in quality which will make uploading them easier. Using `gganimate` isn't very complicated once the data are prepared - the code for the animation in section 4.6 is here, and has been commented out so it won't throw errors in the Notebook. In RStudio you can mass comment/uncomment a codeblock by selecting it and using Ctrl-Shift-C. `gganimate` has some very impressive capabilities and I'm sure you will be satisfied with the results."},{"metadata":{"trusted":true,"_uuid":"8a8670830f0d6297fcd88e1927b2d86781788169"},"cell_type":"code","source":"#ggmap(syr.map, extent='normal', maprange=F) +\n#  geom_tile(data=prewar.df, aes(x=x, y=y, fill=value), alpha=0.9) +\n#  geom_polygon(data = ME.df, aes(x = long, y = lat, group=group),\n#               fill=NA, colour = 'white', size = 0.3, show.legend=F) +\n#  geom_line(data = syr_r.df[syr_r.df$Type == 'Permanent', ],\n#            aes(y=lat, x=long, group=id), size=0.2, colour='navyblue') +\n#  geom_polygon(data = syr_l.df[syr_l.df$Type == 'Permanent', ],\n#               aes(y=lat, x=long, group=id), colour='navyblue', fill='navyblue') +\n#  #custom divergent scale\n#  scale_fill_gradient2(low='darkred', mid='white', high='navyblue', midpoint=0) +\n#  coord_map(projection=\"mercator\",\n#            xlim=c(35, 44),\n#            ylim=c(32, attr(syr.map, \"bb\")$ur.lat)) +\n#  theme_bw() +\n#  labs(title='Prewar Syria Precipitation 2000-2011: Percent Deviation from Mean',\n#       #gganimate: animate subtitle \n#       subtitle = 'Year: {frame_time}',\n#       x='Longitude',\n#       y='Latitude',\n#       caption='Source: GPCC 1901-2013 Monthly Precipitation',\n#       fill='Deviation\\nfrom mean (%)') +\n#  #gganimate: animate plot based on dataframe column 'Year'\n#  transition_time(Year)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fd4314563b1c88e80195a8fcd0848056e74bbd40"},"cell_type":"markdown","source":"---\n<a id='6.2'></a>\n## 6.2 Exercises for the Reader\nI hope that this kernel has been helpful to users developing their R skills. This a large dataset with a lot to explore so for those who wish to make a fork and investigate for themselves here are some exercises to test your understanding and get you started. They are categorised by difficulty, but only roughly, so don't be disheartened if you get completely stuck! Remember that using Google + StackExchange is not cheating, for a given value of cheating. I will be around throughout 2018 to answer any questions in the comments section below. Best of luck!\n\n**Beginner**\n* Using `dates`, `date2days()` and `precip.a`  find the mean global precipitation for the month you were born.\n*(hint: the monthly data is listed by the first day of each month)*\n* What is the difference between `lapply()` and `sapply()`? What do the `2` and `f` in `apply(x, 2, f)` refer to?\n* Use `apply()` to obtain a vector of mean worldwide precipitation for every recorded month and plot it. Are there any notable trends?\n* Add a date axis to the plot above by converting the `time` dimension in the netCDF file\n* Write a function that takes a date and returns the number of *months* since Jan 1st 1800.  Why might this be more useful than `date2days()`? *(harder)*\n  \n**Intermediate**\n* According to this dataset, precisely when and where was the heaviest ever monthly rainfall (or snowfall) recorded?\n* Write a single function that performs the dataframe construction in Section 4.1. How might it be modified to make it more general purpose?\n* Isolate the precipitation data for your home country using Section 3.3 as a guide and verify it.\n* Are there any years of unusually high or low precipitation for it? Can you find historical records that mention them?\n* Which cell has had the highest recorded mean precipitation since 1901? What country does it lie in?\n\n**Advanced**\n* I am a British citizen. Is my island *really* as rainy as everyone likes to joke? How does it compare to, say, France?\n* Write a function that takes a raster and list of SpatialPolygonsDataFrames and outputs the mean raster value that lies in each one.\n* Create a [chloropleth](https://en.wikipedia.org/wiki/Choropleth_map) that shows the mean yearly precipitation of US states (You may exclude Alaska and Hawaii) \n* This animation, shown earlier in Section 1.4,  displays the mean precipitation for each month across the entire planet. Using the netCDF file in this kernel along with `gganimate`, reproduce it - or improve it!\n\n![](https://media.giphy.com/media/1MXDHApgK8OXE7cViy/giphy.gif)"}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}