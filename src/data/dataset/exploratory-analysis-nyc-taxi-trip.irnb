{"metadata": {"kernelspec": {"language": "R", "name": "ir", "display_name": "R"}, "language_info": {"mimetype": "text/x-r-source", "name": "R", "version": "3.4.1", "codemirror_mode": "r", "file_extension": ".r", "pygments_lexer": "r"}}, "cells": [{"cell_type": "markdown", "source": ["#  Exploratory Analysis - NYC Taxi Trip\n", "\n", "_7-21-2017_\n", "\n"], "metadata": {"_execution_state": "idle", "_uuid": "a89a6463c21f351f008903a538bff5943cee7a17", "_cell_guid": "fcfbfc40-710f-43b1-9b52-c2cbbb26f0e1"}}, {"cell_type": "markdown", "source": ["* [Introduction](#preparation)\n", " *  [Load Data](#load)\n", " *  [Missing Values](#missing)\n", " *  [Fixing Date Variables](#fix)\n", "* [Feature Visualisation](#visualisation)\n", " * [Target Variable](#target)\n", " * [Explanatory Variables](#variables)\n", "* [Feature Engineering](#engineering)\n", " * [Distance Covered](#distance)\n", " * [Speed Ride](#speed)\n", "* [Feature Interaction](#interaction)\n", " * [Correlation Plot](#1)\n", " * [Passenger count vs Distance covered](#2)\n", " * [Passenger count vs travel time](#3)\n", "* [Data Cleaning](#outlier)\n", " * [0-km rides](#0)\n", "* [External Data](#external)\n", " * [Fastest Routes](#routes)\n", " * [Weather Data](#weather)\n", "\n", "    "], "metadata": {"_execution_state": "idle", "_uuid": "50bf982bcf656278dfbec1177fccbefdc2808026", "_cell_guid": "2cc9a409-b544-4df1-9b01-c4bc02cd7fcc"}}, {"cell_type": "markdown", "source": ["# Introduction\n", "\n", "This is an Exploratory Data Analysis for the [NYC Taxi Ride Duration](https://www.kaggle.com/c/nyc-taxi-trip-duration) competition.\n", "\n", "In this competition, Kaggle, NYC Taxi and Limousine Commission is challenging you to build a model that predicts the total ride duration of taxi trips in New York City. The primary dataset includes pickup time, geo-coordinates, number of passengers, and several other variables.\n", "\n", "The [data](https://www.kaggle.com/c/nyc-taxi-trip-duration/data) comes in the shape of 1.5 million training observations and 63k test observation. Where each row contains one taxi trip.\n", "\n", "* Load Data and Libraries"], "metadata": {"_execution_state": "idle", "_uuid": "166b6c50b62762f34f17828f18ce2e48351b5da9", "_cell_guid": "1baf702b-778b-4ac1-b256-55eb417331bc"}}, {"metadata": {"_execution_state": "idle", "_uuid": "55c280fffd34ed8474947bc6606e5bff09fff1c0", "_cell_guid": "dfd807ca-abaa-44e3-8358-b9bc5914e1ef", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["suppressMessages({\n", "    \n", "knitr::opts_chunk$set(message=F)\n", "library(data.table)\n", "library(pacman)\n", "library(geosphere)\n", "library(lubridate)\n", "library(readr)\n", "library(dplyr)\n", "library(ggplot2)\n", "library(gridExtra)\n", "library(caret)\n", "library(corrplot)\n", "library(leaflet)\n", "library(stringr)\n", "library(rgdal)\n", " \n", "train = read_csv(\"../input/nyc-taxi-trip-duration/train.csv\")\n", "test = read_csv(\"../input/nyc-taxi-trip-duration/test.csv\")\n", " })  "], "execution_count": null}, {"cell_type": "markdown", "source": ["* Missing Values\n", "\n", "Missing data is the nemesis of every data scientist, especially if they are new in the field. It is important to check whether we have data missing in the train and the test set."], "metadata": {"_execution_state": "idle", "_uuid": "d880f32cc9f2908c6d2ccae190621f6827a40a0f", "_cell_guid": "a56ebbaa-8767-4688-8f86-7b1df47c9671"}}, {"metadata": {"_execution_state": "idle", "_uuid": "82a737ca536e9c66ea11dbc4fc8e59aa474bb607", "_cell_guid": "55f5ff06-b34c-4110-baf4-a84a4a57b0d2", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["sum(is.na(train))"], "execution_count": null}, {"metadata": {"_execution_state": "idle", "_uuid": "6821c10fc6ea94fc0d83021b6a5c3c14ffce3b5c", "_cell_guid": "3e586666-7bfa-43a1-88f8-8d8f59ee3361", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["sum(is.na(test))"], "execution_count": null}, {"cell_type": "markdown", "source": ["Fortunately there are no missing values in the data sets. Lets move on to the following part."], "metadata": {"_execution_state": "idle", "_uuid": "2045196af3d5e6beb839a5a3a0f9b27af6d5404f", "_cell_guid": "f2891e5b-94a2-4133-8b26-55dc58b15134"}}, {"cell_type": "markdown", "source": ["* Fixing Date Variables\n", "\n", "_Pickup_ and _Dropoff_ date are two of the few variables that are provided. This information could play an important role in predicting the total duration time that is why it needs some attention. I will extract different time features such as hour, week, month and so on."], "metadata": {"_execution_state": "idle", "_uuid": "4c902cd1bcd8698d6022160c3b6950e9b08e82a7", "_cell_guid": "72df0357-a6fb-43b6-985d-2e3cad8fb39a"}}, {"metadata": {"_execution_state": "idle", "_uuid": "557852c8788de3df131f478ba599648f9b633a9f", "_cell_guid": "81eb100b-42fa-4c4b-9b9e-b4c56768ed88", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["train$pickup_hour <- hour(train$pickup_datetime)\n", "train$pickup_week <- week(train$pickup_datetime)\n", "train$pickup_month <- month(train$pickup_datetime)\n", "train$pickup_weekdays <- weekdays(train$pickup_datetime)\n", "train$pickup_weekend <- ifelse(train$pickup_weekdays==1 | train$pickup_weekdays==7,\"Weekend\",\"not-Weekend\")\n", "\n", "train = as.data.table(train)\n", "\n", "train[,pickup_datetime:=as.Date(pickup_datetime)]\n", "train[,dropoff_datetime:=as.Date(dropoff_datetime)]\n", "\n", "train[,\":=\"(\n", "   pickup_yday=yday(pickup_datetime)\n", "  ,pickup_mday=mday(pickup_datetime)\n", ")]"], "execution_count": null}, {"cell_type": "markdown", "source": ["# Feature Visualisation\n", "\n", " * Target Variable: Lets do some analysis on _Trip Duration_. "], "metadata": {"_execution_state": "idle", "_uuid": "ce66dedce38f9d7904f93b599845d01c01db8401", "_cell_guid": "77ea78a2-e605-442c-b630-b4f3ee0e0f13"}}, {"metadata": {"_execution_state": "idle", "_uuid": "51c9bf098dd041dabd0c6778de0f8508f8a76302", "_cell_guid": "4faf4bbc-c31f-40eb-a93a-daea93af1452", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["train %>% \n", "  ggplot(aes(x=trip_duration)) + \n", "  geom_histogram(bins=40000, fill=\"red\")+\n", "  theme_bw()+theme(axis.title = element_text(size=12),axis.text = element_text(size=12))+\n", "  ylab(\"Density\")+coord_cartesian(x=c(0,6000))"], "execution_count": null}, {"cell_type": "markdown", "source": ["Lets see the distribution of the passenger_count and vendor_id. We can observe that the majority of the rides are singel ride. But still a substantial number is more than one ride. Probably rides with more than one ride are more often people who are visiting NY."], "metadata": {"_execution_state": "idle", "_uuid": "78dda3b4dd0d56bec1dd2aab1b046e2f3fc6fe66", "_cell_guid": "2a874ae8-5cd6-423f-a443-486a03bc2572"}}, {"metadata": {"_execution_state": "idle", "_uuid": "c53b39eed7abd566400746ca784fa52858e7e096", "_cell_guid": "6d1cfdbf-e24f-4571-a6a5-2e4f77526bdc", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = train %>% \n", "  group_by(passenger_count) %>% \n", "  count() %>% \n", "  ggplot(aes(x=passenger_count,y=n, fill=passenger_count))+\n", "  geom_col()+\n", "  theme(legend.position = \"none\")\n", "\n", "plot2 = train %>% \n", "  group_by(vendor_id) %>% \n", "  count() %>% \n", "  ggplot(aes(x=vendor_id,y=n, fill=vendor_id))+\n", "  geom_col()+\n", "  theme(legend.position = \"none\")\n", "\n", "grid.arrange(plot1, plot2, ncol =2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["Month: I do not see any real pattern here. Except that the mean _triptime_ increases gradually as time passes by. I would think that as it gets warmer NYC gets more visitors and with it Manhattan. That is as it gets warmer Manhatten gets more visitors from outside. But the plot _Rides over Time_ does not really support this. "], "metadata": {"_execution_state": "idle", "_uuid": "a7ad4011b0886fe5bf7108f70b01fb03e3609c8b", "_cell_guid": "95b9501c-5e46-454a-bc55-4c38228b8b32"}}, {"metadata": {"_execution_state": "idle", "_uuid": "9d80fa644681d8cca67580cad01cecdc18bb3e62", "_cell_guid": "075d7a6d-2c09-48a4-8e84-404b94c9c099", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = train[, list(mean_trip_duration= mean(trip_duration)), by=pickup_datetime] %>%\n", "  ggplot(aes(x=pickup_datetime, y=mean_trip_duration)) + \n", "  geom_bar(stat='identity', fill='steelblue') + \n", "  labs(x='', y='Mean Trip Duration', title='Mean Trip Duration over time')\n", "\n", "plot2 = train[, .N, by=pickup_datetime] %>%\n", "  ggplot(aes(x=pickup_datetime, y=N)) + \n", "  geom_bar(stat='identity', fill='steelblue') + \n", "  labs(x='', y='Number of Rides', title='Rides over time')\n", "\n", "grid.arrange(plot1, plot2, ncol =2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["Weekdays: I do not see anything intersting here either."], "metadata": {"_execution_state": "idle", "_uuid": "7ca1e48fab6fc9ecbe2868b5fb44c182efc51996", "_cell_guid": "de5d27a1-b622-49b6-9675-335d677fcf81"}}, {"metadata": {"_execution_state": "idle", "_uuid": "e0a4a19a3eb1f0f26a08fba0b2a03c3bfa2afa1e", "_cell_guid": "34b56d87-61f4-49fb-a1c6-ac47ae1bd3df", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 <-train[, list(mean_trip_duration = mean(trip_duration)), by = pickup_weekdays] %>%\n", "  ggplot(aes(x = pickup_weekdays, y = mean_trip_duration)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Month', y = 'Mean Trip Duration', title = 'Mean Trip duration by weekdays')\n", "\n", "grid.arrange(plot1)"], "execution_count": null}, {"cell_type": "markdown", "source": ["Hours: The only thing that catches my attention is that in night hours more distance is covered in lesser time. Which is obvious because of less traffic and i have heard form a New Yorker that between 4 and 5 in the morning the the taxis change shift. The fresh taxi drivers are often reluctant to pickup passengers. I believe that these fresh drivers would prefer to pickup passengers who are in for a long ride - it is more profitable for the taxi drivers. Therefor I would expect a higher distance covered in the shift hours. This will be tested in the in the next section where the feature distance will be covered."], "metadata": {"_execution_state": "idle", "_uuid": "2774dd7bee55d4c9bb0e477f115a87ab422a6314", "_cell_guid": "767fde05-5dd9-4428-bcb6-6d7919e459ad"}}, {"metadata": {"_execution_state": "idle", "_uuid": "29fdd45b3f72b4327b11d6a4a667efa3669bb689", "_cell_guid": "d9ae9563-f26d-466d-9a8f-c06cc5eb5efd", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 <-train[, list(mean_trip_duration = mean(trip_duration)), by = pickup_hour] %>%\n", "  ggplot(aes(x = as.factor(pickup_hour), y = mean_trip_duration)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Hours', y = 'Mean Trip Duration', title = 'Mean Trip duration by hour of the day')\n", "\n", "plot2 = train[,.N, by=pickup_hour] %>%\n", "  ggplot(aes(x=pickup_hour, y=N)) + \n", "  geom_bar(stat='identity', fill='steelblue') + \n", "  labs(x='', y='Number of Rides', title='Total Rides Per Hour')\n", "\n", "grid.arrange(plot1, plot2, ncol =2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["# Feature Engineering\n", "\n", " * Distance in kilometers between pickup and dropoff location \n", "\n", "From the coordinates of the _pickup_ and _dropoff_ points we can calculate the distance between the two points. To compute these distances we are using the _distHaversine_ function of the _geosphere_ package. This method gives us the shortest distance between two points on a spherical earth."], "metadata": {"_execution_state": "idle", "_uuid": "167b67843f5d4e314cceabfb34dd762f134e64c6", "_cell_guid": "ba991e53-0335-42aa-b817-23e96c746b2e"}}, {"metadata": {"_execution_state": "busy", "_uuid": "90c516e80212e104b2fa23f456e93472ce742523", "_cell_guid": "8333a38f-defb-4848-9b6a-c8062e5b2925", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["train <- train[,distance_km := \n", "                     distHaversine(matrix(c(pickup_longitude, pickup_latitude), ncol = 2),\n", "                     matrix(c(dropoff_longitude,dropoff_latitude), ncol = 2))/1000\n", "              ]\n", "train %>% \n", "  ggplot(aes(x=distance_km)) + \n", "  geom_histogram(bins=4000, fill=\"red\")+\n", "  theme_bw()+theme(axis.title = element_text(size=11),axis.text = element_text(size=8))+\n", "  ylab(\"Density\")+coord_cartesian(x=c(0,25))"], "execution_count": null}, {"cell_type": "markdown", "source": [" * Speed of the Ride\n", "\n", "The feature _speed_ is not available for the test data set. But it can help us to see what kind of pattern is there in the traffic."], "metadata": {"_execution_state": "idle", "_uuid": "2e78fd9a6070805d293020dee138b7d16c2642b4", "_cell_guid": "b72c3d0f-d5a2-4f29-b7df-0f2b1aa81b88"}}, {"metadata": {"_execution_state": "busy", "_uuid": "fa9a9d4c00cebbcc585290d42afc98f1b5d8c1ad", "_cell_guid": "8a076155-1c20-46bb-b3d3-1222d29b4ac4", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["train[,speed:=(distance_km)/(trip_duration/3600)]\n", "\n", "train %>% \n", "  ggplot(aes(x=speed)) + \n", "  geom_histogram(bins=4000, fill=\"red\")+\n", "  theme_bw()+theme(axis.title = element_text(size=11),axis.text = element_text(size=8))+\n", "  ylab(\"Density\")+coord_cartesian(x=c(0,50))\n"], "execution_count": null}, {"metadata": {"_execution_state": "busy", "_uuid": "159733d94894fd0b97305b80460a623772b0a366", "_cell_guid": "5cab0381-e2dc-4475-bf03-02b636796058", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["summary(train$speed)"], "execution_count": null}, {"cell_type": "markdown", "source": ["There are certain rides with a speed of _9285km/h_. We will investigate this in the Outlier Analysis part. But the average speed of _15km/h_ is reasonable. Although this will vary over the course of the day. Lets see check that also."], "metadata": {"_execution_state": "idle", "_uuid": "edf6323d5795f876760f4adfbefe7f9125cf5ff3", "_cell_guid": "cd8a5924-6974-4831-81c1-58969e01ee30"}}, {"metadata": {"_execution_state": "busy", "_uuid": "6dfc7d0da6b826880087984d2715d5975e519cd0", "_cell_guid": "21345f56-186f-4c4a-8231-d107f86537ea", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["train %>% \n", "  group_by(pickup_hour) %>% \n", "  summarize(mean_speed = mean(speed),n()) %>% \n", "  ggplot(aes(x=pickup_hour,y=mean_speed))+\n", "  geom_smooth(method = 'loess',color=\"grey10\")+\n", "  geom_point(color=\"red\")+coord_cartesian(ylim=c(10,25))+theme_bw()"], "execution_count": null}, {"cell_type": "markdown", "source": ["The average speed in considerably lower during the day. Which is obviously because of busy traffic. "], "metadata": {"_execution_state": "idle", "_uuid": "53e4d3c4d4cebb7e45f8684f206600e92e3afe2b", "_cell_guid": "e359018f-51ba-4ee2-935b-02cf5bebfe77"}}, {"cell_type": "markdown", "source": ["# Feature Interaction\n", " * Correlation Plot"], "metadata": {"_execution_state": "idle", "_uuid": "39d29af97899bffc8d5d2aa4f09620618cd134fa", "_cell_guid": "6fef90b0-143a-4d92-94bf-a57b836eeafa"}}, {"metadata": {"_execution_state": "busy", "_uuid": "e38e6ebe536696b1be362cb18c5602ca9523e03d", "_cell_guid": "802f8fae-14fe-4061-a3d8-79a87c16451c", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["corr_features = train[,.(pickup_hour, pickup_week, pickup_month,pickup_yday, pickup_mday,passenger_count,trip_duration,distance_km)] \n", "corrplot(cor(corr_features, use='complete.obs'), type='lower')"], "execution_count": null}, {"cell_type": "markdown", "source": ["This is a very 'disturbing' plot because non of the variables correlate with the trip_duration. Distance is the only one with some correlation but we do not have that feature in the test set. It is possible that part of the features correlate with the target variable, but that has to be investigated. That there is no correlation between the features and the target variable means that we have to look for external features to predict the trip time. "], "metadata": {"_execution_state": "idle", "_uuid": "50188156a1cda6e13848bb46d59657d78f742069", "_cell_guid": "1e33a41b-47e9-4eae-a858-80efa86c73f9"}}, {"cell_type": "markdown", "source": ["*  trip_duration and distance_km\n", "\n", "How does the mean _trip_duration_ and mean _distance_km_ change with _hour_:"], "metadata": {"_execution_state": "idle", "_uuid": "95beee39d294f0602ad6ad65ad14119ef69c59d8", "_cell_guid": "0b0c18f0-d447-4aea-9227-fd5c3742a186"}}, {"metadata": {"_execution_state": "busy", "_uuid": "a0fd1c72e856a824f4e5473eccb8e7a060386010", "_cell_guid": "11e0f7f2-c52c-432b-82c9-f835f01c3d3b", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = train %>% \n", "  group_by(pickup_hour) %>% \n", "  summarize(mean_trip_duration = mean(trip_duration),n()) %>% \n", "  ggplot(aes(x=pickup_hour,y=mean_trip_duration))+\n", "  geom_smooth(method = 'loess',color=\"grey10\")+\n", "  geom_point(color=\"red\")+coord_cartesian(ylim=c(500,1500))+theme_bw()\n", "\n", "plot2 = train %>% \n", "  group_by(pickup_hour) %>% \n", "  summarize(mean_distance = mean(distance_km),n()) %>% \n", "  ggplot(aes(x=pickup_hour,y=mean_distance))+\n", "  geom_smooth(method = 'loess',color=\"grey10\")+\n", "  geom_point(color=\"red\")+coord_cartesian(ylim=c(0,10))+theme_bw()\n", "\n", "grid.arrange(plot1, plot2, ncol =2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["* passenger_count vs distance_covered"], "metadata": {"_execution_state": "idle", "_uuid": "db59c716e6fbe0a2714450b40b766d00ccd50c77", "_cell_guid": "06501b92-0bfe-4abd-959e-12a732585e2a"}}, {"metadata": {"_execution_state": "busy", "_uuid": "0ec762db097402b29a1885bdefcec145c7c35c79", "_cell_guid": "c86bfc7b-4ce7-4426-bca4-4da05dbc2371", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["dim = train[,.(distance_km, trip_duration)]\n", "dim[,distance_m:=distance_km/1000]\n", "dim %>%\n", "  ggplot(aes(distance_m, trip_duration)) +\n", "  geom_point() +\n", "  scale_x_log10() +\n", "  scale_y_log10() +\n", "  labs(x = \"Direct distance [m]\", y = \"Trip duration [s]\")"], "execution_count": null}, {"cell_type": "markdown", "source": ["# Data Cleaning\n", " * 0 rides\n", "\n", "There are rides in the training set where zero kilometer is covered. In the plot we can see the geolocation of these rides. In the figure below I have a density plot of time duration for these rides.\n"], "metadata": {"_execution_state": "idle", "_uuid": "3565fd2dc135dec6faef1341c8e6c0709efc903c", "_cell_guid": "5b82aa11-8293-4921-bf79-acbe240bf410"}}, {"metadata": {"_execution_state": "busy", "_uuid": "0ce6ee057d2c5201cdf8aac7a6a4893312734544", "_cell_guid": "799a8cb2-d8f1-405c-842b-5e15500b0675", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["zero_km = train[distance_km==0, .(dropoff_longitude,dropoff_latitude,trip_duration)]\n", "#setnames(zero_km,c(\"dropoff_latitude\",\"dropoff_longitude\"),c(\"lat\",\"lng\"))\n", "#zero_km %>% \n", " # leaflet() %>%\n", "  #addTiles() "], "execution_count": null}, {"metadata": {"_execution_state": "busy", "_uuid": "8602c6da1222e3ed34fdd8a4469ef9d5ccf55cde", "_cell_guid": "0ef3ae71-1a33-4b79-b6a8-46cecb1630d0", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["#zero_km = train[distance_km==0, .(dropoff_longitude,dropoff_latitude)]\n", "zero_km %>% \n", "  ggplot(aes(x=trip_duration)) + \n", "  geom_histogram(bins=10000, fill=\"red\")+\n", "  theme_bw()+theme(axis.title = element_text(size=12),axis.text = element_text(size=10))+\n", "  ylab(\"Density\")+coord_cartesian(x=c(0,2500),y=c(0,500)) \n", " "], "execution_count": null}, {"metadata": {"_execution_state": "busy", "_uuid": "9c5e19ce2a469b6bd8a5774e81f071ffd8ed1fa2", "_cell_guid": "a03a378a-6b9d-4684-9bf3-2c3982b38baf", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["summary(zero_km$trip_duration) "], "execution_count": null}, {"cell_type": "markdown", "source": ["# External Data\n", "* Fastest Routes\n", "\n", "A helpful dataset is provided by [oscarleo](https://www.kaggle.com/oscarleo) using the Open Source Routing Machine, [OSRM](http://project-osrm.org/). The [data](https://www.kaggle.com/oscarleo/new-york-city-taxi-with-osrm) essentialy gives the following information about each ride.\n", " \n", "  1. The fastest route from pickup to dropoff location and the corresponding time.\n", "  2. Number of streets for the fastest routes.\n", "  3. Number of maneuvers per trip, for example entering a highway.\n", "  4. Directions per trip, for example taking a left turn or right turn.\n", "  \n", "First lets load the data.\n"], "metadata": {"_execution_state": "idle", "_uuid": "e61417a244faab2f0f723573dee95b3a3168fba4", "_cell_guid": "40cafedb-226e-4c43-9aae-2c9db40d7592"}}, {"metadata": {"_execution_state": "busy", "_uuid": "3ddc96d0d6aba682cddba01878f3d3c01d27ec68", "_cell_guid": "49766f00-e6dc-400d-97ad-2c8b0354d036", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["\n", "\n", "suppressMessages({\n", "fastest_route_train = read_csv(\"../input/new-york-city-taxi-with-osrm/fastest_routes_train_part_1.csv\")\n", "})\n", "dtrain = merge(train, fastest_route_train, by=\"id\")\n", "#dtrain = as.data.table(dtrain)\n"], "execution_count": null}, {"cell_type": "markdown", "source": [" * Number of Streets"], "metadata": {"_execution_state": "idle", "_uuid": "cd0ac741f758b7da6e06da4dce38edaf5eebc153", "_cell_guid": "fc8affa8-e33a-476a-bcfd-8dab51c9a8dd"}}, {"metadata": {"_execution_state": "busy", "_uuid": "e3d168feb454562071db667fe3f61a86eaaee0e8", "_cell_guid": "5f0129c1-a439-40fb-a142-141a9549a4cf", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["dtrain[,number_of_streets := number_of_steps - 1]\n", "plot1 <- \n", "  dtrain[, list(mean_trip_duration = mean(total_travel_time)), by = number_of_streets] %>%\n", "  ggplot(aes(x = as.factor(number_of_streets), y = mean_trip_duration)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Number of Streets', y = 'Mean Trip Duration', title = 'Mean Trip duration by Number of Streets')\n", "\n", "plot2 <- dtrain[, list(Number_of_Rides = .N), by = number_of_streets] %>%\n", "  ggplot(aes(x = as.factor(number_of_streets), y = Number_of_Rides)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Number of Streets', y = 'Number of Trips', title = 'Number of Rides by Number of Streets')\n", "\n", "plot3 <- dtrain[, list(mean_distance = mean(total_distance)/1000), by = number_of_streets] %>%\n", "  ggplot(aes(x = as.factor(number_of_streets), y = mean_distance)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Number of Streets', y = 'Mean Trip Distnace(km)', title = 'Mean Trip Distance by Number of Streets')\n", "\n", "grid.arrange(plot1,plot2, plot3)"], "execution_count": null}, {"cell_type": "markdown", "source": [" * Step Maneauvers "], "metadata": {"_execution_state": "idle", "_uuid": "f402cfe52706e8d62e4379c936029d29c8fece7b", "_cell_guid": "51abbc8b-dbef-4516-a0f8-fee631fed5e5"}}, {"metadata": {"_execution_state": "busy", "_uuid": "7a9ec4ab072927afb8c0298e1608b84fec2e9046", "_cell_guid": "568b23b5-7e0d-4844-973a-249ce969fb03", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["dtrain[, ':='(new_name = str_count(step_maneuvers,\"new name\"),\n", "            depart = str_count(step_maneuvers,\"depart\"),\n", "            arrive = str_count(step_maneuvers,\"arrive\"),\n", "            merge = str_count(step_maneuvers,\"merge\"),\n", "            on_ramp = str_count(step_maneuvers,\"on ramp\"),\n", "            off_ramp = str_count(step_maneuvers,\"off ramp\"),\n", "            fork = str_count(step_maneuvers,\"fork\"),\n", "            end_of_road = str_count(step_maneuvers,\"end of road\"),\n", "            continue = str_count(step_maneuvers,\"continue\"),\n", "            roundabout = str_count(step_maneuvers,\"roundabout\"),\n", "            rotary = str_count(step_maneuvers,\"rotary\"),\n", "            roundabout_turn = str_count(step_maneuvers,\"roundabout turn\")          \n", "    )]\n", "\n", "dtrain[, ':=' (nb_step_maneuvers = new_name + depart + arrive + merge + on_ramp + off_ramp + fork\n", "             + end_of_road + continue + roundabout + rotary + roundabout_turn)]\n", "\n", "\n", "dtrain[,nb_step_maneuvers:= ifelse(nb_step_maneuvers>= 20, 20, nb_step_maneuvers)]\n", "\n", "plot1 <- \n", "  dtrain[, list(mean_trip_duration = mean(total_travel_time)), by = nb_step_maneuvers] %>%\n", "  ggplot(aes(x = as.factor(nb_step_maneuvers), y = mean_trip_duration)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Total Number of Maneauvers', y = 'Mean Trip Duration')\n", "\n", "plot2 <- dtrain[, list(Number_of_Rides = .N), by = nb_step_maneuvers] %>%\n", "  ggplot(aes(x = as.factor(nb_step_maneuvers), y = Number_of_Rides)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Total Number of Maneauvers', y = 'Number of Trips')\n", "\n", "grid.arrange(plot1,plot2, ncol=2)\n"], "execution_count": null}, {"cell_type": "markdown", "source": ["* Step Direction"], "metadata": {"_execution_state": "idle", "_uuid": "302919d0ddf1f098fda59ad98e8fa0464022c68e", "_cell_guid": "38388e58-7c2b-4658-95ab-559a5f06ed13"}}, {"metadata": {"_execution_state": "busy", "_uuid": "6e4401a53491e8664b61156e196ee3e842cf6973", "_cell_guid": "e98b3f55-2712-44a3-a87c-3bdfd1e65ec8", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["dtrain[, ':='(slight_left = str_count(step_direction,\"slight left\"),\n", "            slight_right = str_count(step_direction,\"slight right\"),\n", "            right = str_count(step_direction,\"right\"),\n", "            left = str_count(step_direction,\"left\"),\n", "            sharp_right = str_count(step_direction,\"sharp right\"),\n", "            sharp_left = str_count(step_direction,\"sharp left\"),\n", "            straight = str_count(step_direction,\"straight\"),\n", "            uturn = str_count(step_direction,\"uturn\")     \n", "    )]\n", "\n", "dtrain[, ':=' (nb_step_direction = slight_left + slight_right + right + left + \n", "               sharp_right + sharp_left + straight + uturn)]\n", "\n", "dtrain[,nb_step_direction:= ifelse(nb_step_direction>= 40, 40, nb_step_direction)]\n", "\n", "plot1 <- \n", "  dtrain[, list(mean_trip_duration = mean(total_travel_time)), by = nb_step_direction] %>%\n", "  ggplot(aes(x = (nb_step_direction), y = mean_trip_duration)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Number of Different Direction', y = 'Mean Trip Duration')\n", "\n", "plot2 <- dtrain[, list(Number_of_Rides = .N), by = nb_step_direction] %>%\n", "  ggplot(aes(x = (nb_step_direction), y = Number_of_Rides)) +\n", "  geom_bar(stat = 'identity', fill = 'steelblue') +\n", "  labs(x = 'Number of Different Direction', y = 'Number of Trips')\n", "\n", "grid.arrange(plot1,plot2, ncol=2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["\n", "I would like to check a few more things. For example how much difference is there in time between _actual travel_ time and the _fastest route_."], "metadata": {"_execution_state": "idle", "_uuid": "fb60fefb0347f91009b65d090369d7fabefdad1b", "_cell_guid": "6eabcdee-5700-4763-bf7e-673a3b13e441"}}, {"metadata": {"_execution_state": "busy", "_uuid": "b18fa61385cbbbc142246038d4c2d4ff45fc7860", "_cell_guid": "80b56152-1ad5-4d0b-b0fe-3296a3fc6aba", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 <- dtrain %>%\n", "  ggplot(aes(trip_duration)) +\n", "  geom_density(fill = \"red\", alpha = 0.5) +\n", "  geom_density(aes(total_travel_time), fill = \"blue\", alpha = 0.5) +\n", "  scale_x_log10() +\n", "  coord_cartesian(xlim = c(5e1, 8e3))\n", "\n", "dtrain[,diff:= abs(trip_duration-total_travel_time)]\n", "\n", "dtrain[,number_of_steps:= ifelse(number_of_steps>= 25, 25, number_of_steps)]\n", "\n", "plot2 =  dtrain[, list(mean_distance_km = mean(diff)), by=number_of_steps-1] %>%\n", "  ggplot(aes(x=number_of_steps, y=mean_distance_km)) + \n", "  geom_bar(stat='identity', fill='steelblue') + \n", "  labs(x='Number of Streets', y='|TripDuration - TotalTravelTime)|')\n", "\n", "grid.arrange(plot1, plot2, ncol=2)\n"], "execution_count": null}, {"cell_type": "markdown", "source": ["Learnings:\n", "\n", "* The blue plot is the _fastest route_ density plot. It looks almost like _actual travel_ time but with a shift. \n", "\n", "\n", "* In the scond plot we observe that the absolute difference between _actual travel_ and _fastest route_ time increase as the     number of streets increase. It is logical because the probability that the fastest route today differs from the actual route   of the past increases as the number of step increase.\n", "\n", "\n", "* I find it really hard to comprehend how to use the fastest route data to say something meanigful about the actual route.       Because the fastest route today is not the fastest route of tommorow or of the past. So the routes in the training set are     different than the routes suggested by [OSRM](http://project-osrm.org/). What I mean by different is that the features associated with the fastest routes does not really say much about the rides in the training set.\n"], "metadata": {"_execution_state": "idle", "_uuid": "2c0f10ff9327a6df6824ea46f7d9d8c2dcd4cc9c", "_cell_guid": "a4131f53-5a19-480c-b73a-45be7143018d"}}, {"cell_type": "markdown", "source": [" * Google Distance Matrix\n", " \n", "This [dataset](https://www.kaggle.com/debanjanpaul/new-york-city-taxi-trip-distance-matrix) is provided by [Debanjan](https://www.kaggle.com/debanjanpaul) using [Google Maps API](https://developers.google.com/maps/documentation/distance-matrix/intro#traffic-model), it  promises a lot, at least if the data is availabe for all the rides in this competition. The data is provided only for a subset of the training set so I am waiting anxisiuosly for the rest of the data. The important piece of information in this dataset is the historical mean duration time between two locations called _google duration_. I will creat a new feature as the difference between the _google duration_ and _actual duration_. If the difference is smaller than zero than there is a 'delay' otherwise there is an 'early arrival'.\n", "\n", "Let's load the data and do some analysis.\n"], "metadata": {"_uuid": "2f21b3898700e691dbad56a364af7559a7149e42", "_cell_guid": "963a0c74-4500-437a-882a-d5de5d051b3e"}}, {"metadata": {"_execution_state": "busy", "_uuid": "c2b0725659bf635748cb15a5e6b48dd9b3a8c72e", "_cell_guid": "a42f9d79-a7b7-4f31-ae67-44fbe5699294", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["suppressMessages({\n", "google_dist = read_csv(\"../input/new-york-city-taxi-trip-distance-matrix/train_distance_matrix.csv\")\n", "})\n", "\n", "google_dist = data.table(google_dist)\n", "google_dist[, diff := google_duration-trip_duration]"], "execution_count": null}, {"metadata": {"_execution_state": "busy", "_uuid": "67903759ac653eb609568933f1cb49cd6fcda44b", "_cell_guid": "175110b6-a169-4564-9bfd-fc44241312a4", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 <- google_dist %>%\n", "  ggplot(aes(trip_duration)) +\n", "  geom_density(fill = \"red\", alpha = 0.5) +\n", "  geom_density(aes(google_duration), fill = \"blue\", alpha = 0.5) +\n", "  scale_x_log10() +\n", "  coord_cartesian(xlim = c(5e1, 8e3))\n", "\n", "\n", "plot2 = google_dist %>% \n", "  ggplot(aes(x=diff)) + \n", "  geom_histogram(bins=20000, fill=\"red\")+\n", "  theme_bw()+theme(axis.title = element_text(size=12),axis.text = element_text(size=12))+\n", "  ylab(\"Density\")+coord_cartesian(x=c(-2000,2000))\n", "\n", "grid.arrange(plot1, plot2, ncol=2)"], "execution_count": null}, {"cell_type": "markdown", "source": ["Learnings:\n", "\n", "* The blue plot is the _google duration_ and the red is the _actual duration_ time. Google duration is more skewed. Actual duration has a higher variance (it is more swollen) and thicker tail.\n", "\n", "\n", "* The second plot is the histogram of the time differene between _google duration_ and _actual duration_. It can be observed that there are more observations to the right of the zero than to the left. That is there are more 'rides that have a  'early arrival' than 'delays'. This information can be used to say something about the traffic volume. "], "metadata": {"_uuid": "bda1d268fa179c69d9ee1144fcbe42b6bbdce18b", "_cell_guid": "d0759a6d-7019-4e29-9cee-38f447b54e3e"}}, {"cell_type": "markdown", "source": [" *  Weather Data"], "metadata": {"_uuid": "c624c1c51daef1fa235f4f7dd853b5c547e62ca1", "_cell_guid": "513a1eaa-7489-4e79-a048-ddb9c9ea78d9"}}, {"metadata": {"_uuid": "76089fd5b08680d1752fa341b5ddf0fab8cd1552", "_cell_guid": "78934fd0-9f97-4ba3-bac3-ae75d6459327", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["weather = fread(\"../input/weather-data-in-new-york-city-2016/weather_data_nyc_centralpark_2016.csv\")\n", "weather <- weather %>%\n", "  mutate(date = dmy(date),\n", "         rain = as.numeric(ifelse(precipitation == \"T\", \"0.01\", precipitation)),\n", "         s_fall = as.numeric(ifelse(`snow fall` == \"T\", \"0.01\", `snow fall`)),\n", "         s_depth = as.numeric(ifelse(`snow depth` == \"T\", \"0.01\", `snow depth`)),\n", "         all_precip = s_fall + rain,\n", "         has_snow = (s_fall > 0) | (s_depth > 0),\n", "         has_rain = rain > 0,\n", "         max_temp = `maximum temerature`,\n", "         min_temp = `minimum temperature`)\n", "\n", "\n", "weather = as.data.table(weather)\n", "weather[, c(\"precipitation\", \"snow fall\", \"snow depth\", \"maximum temerature\", \"minimum temperature\") := NULL]\n", "\n", "setkey(dtrain, dropoff_datetime)\n", "setkey(weather, date)\n", "\n", "dtrain = weather[dtrain]\n"], "execution_count": null}, {"cell_type": "markdown", "source": ["I would think that the weather has an effect on _travel time_ in two ways, namely:\n", "\n", "  1. Snow: should play a role only after a certain amount snow fall. \n", "  2. Rain: same as snow should play a role only after a certain amount of rainfall.\n", "  \n", "Lets explore the relationship between _travel time_ and these factors.\n", "\n", "  1. Snow"], "metadata": {"_uuid": "a45c8a168d9bca5306583f2dbb1efae32ce6d228", "_cell_guid": "f335982b-f551-4adf-9de1-481a70059571"}}, {"metadata": {"_uuid": "95acca22e4f22b2612f42207887cd26a9a96bc67", "_cell_guid": "9d7053bb-8578-498b-be71-9719f08329fc", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = dtrain %>%\n", "  group_by(pickup_hour, has_snow) %>%\n", "  summarise(duration = mean(trip_duration)) %>%\n", "  ggplot(aes(pickup_hour,duration, color = has_snow)) +\n", "  geom_jitter(width = 0.01, size = 2) +\n", "  labs(x = \"hour\", y = \"trip duration\")\n", "\n", "plot2 = dtrain %>% \n", "  group_by(pickup_hour, has_snow) %>%\n", "  summarise(distance = mean(distance_km)) %>%\n", "  ggplot(aes(pickup_hour,distance, color = has_snow)) +\n", "  geom_jitter(width = 0.01, size = 2) +\n", "  labs(x = \"hour\", y = \"Distance Covered\")\n", "\n", "grid.arrange(plot1, plot2,ncol=1)"], "execution_count": null}, {"cell_type": "markdown", "source": ["From the first plot it can be concluded that when it is snowing, between 10 in the morning and 20 o'clock in the evening, the average trip duration is lower compared to days when it is not snowing. It is not very strange since when it is snowing people who generally walk or bike they now take a taxi to reach their destination. \n", "\n", " 2. Rain\n", " "], "metadata": {"_uuid": "d5aadf4b16744be2dc1eb4a3d56bb117e05f5279", "_cell_guid": "19ff59ee-aaeb-4a92-afb3-8b6c4cfb8158"}}, {"metadata": {"_uuid": "26bf1f09c6efff695c097f68438c1c9fec4afe43", "_cell_guid": "7a4e870c-b45a-44c1-a4f9-4862930e5165", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = dtrain %>%\n", "  group_by(pickup_hour, has_rain) %>%\n", "  summarise(duration = mean(trip_duration)) %>%\n", "  ggplot(aes(pickup_hour,duration, color = has_rain)) +\n", "  geom_jitter(width = 0.01, size = 2) +\n", "  labs(x = \"hour\", y = \"trip duration\")\n", "\n", "plot2 = dtrain %>% \n", "  group_by(pickup_hour, has_rain) %>%\n", "  summarise(distance = mean(distance_km)) %>%\n", "  ggplot(aes(pickup_hour,distance, color = has_rain)) +\n", "  geom_jitter(width = 0.01, size = 2) +\n", "  labs(x = \"hour\", y = \"Distance Covered\")\n", "\n", "grid.arrange(plot1, plot2,ncol=1)\n"], "execution_count": null}, {"cell_type": "markdown", "source": ["I do not see much difference between days when is raining and days when it is not in mean trip duration. But i do see that distance covered in rainy days is lesser compared to non rainy days. Again this is logical since people who generally walk or bike short distances now prefer to take a taxi ride to their destination."], "metadata": {"_uuid": "57916413b123c91999358a1bc624d65f01ff0bc1", "_cell_guid": "2cf0360a-9635-4781-b899-9820517abaf8"}}, {"cell_type": "markdown", "source": ["*  Neighbhorhoods Incorporation\n", "\n", "In this section I will be trying to assign a neighborhood to every pickup and dropoff location. And eventually try to establish a relationship between trip duration and the neighborhood, if there is a relationship of course. [Incorporation of the neighborhood](https://www.kaggle.com/jackcook/incorporating-neighborhoods-into-your-model/notebook) is based on the work of [Jack Cook](https://www.kaggle.com/jackcook)."], "metadata": {"_uuid": "73656c6d9e9a7c6810f0003b5e03edcc72b6e673", "_cell_guid": "4b72f2b0-c2ba-403e-8d2c-0237b7a0a2b4"}}, {"metadata": {"_uuid": "01edde56153bf6b44bb0f6dd3ef9543a61c3a1b9", "_cell_guid": "246e5197-f774-4b76-a3be-831ba9905b1c", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["ny.map <- readOGR(dsn = \"../input/neighborhoods-in-new-york/ZillowNeighborhoods-NY.shp\", layer = \"ZillowNeighborhoods-NY\")\n", "neighborhoods <- ny.map[ny.map$City == \"New York\", ]\n", "neighborhood_names <- levels(neighborhoods$Name)\n", "print(head(neighborhood_names, n = 12))\n", "\n", "find_neighborhoods <- function(df, long_feature, lat_feature, neighborhood_feature) {\n", "  \n", "  dat <- data.frame(long = df[long_feature][[1]], lat = df[lat_feature][[1]])\n", "  coordinates(dat) <- ~ long + lat\n", "  proj4string(dat) <- proj4string(neighborhoods)\n", "  df[neighborhood_feature] <- over(dat, neighborhoods)$Name\n", "  \n", "  levels(df[[neighborhood_feature]]) <- c(levels(df[[neighborhood_feature]]), \"Unknown\")\n", "  df[[neighborhood_feature]][is.na(df[[neighborhood_feature]])] <- \"Unknown\"\n", "  \n", "  return(df)\n", "}\n", "\n", "dtrain = as.data.frame(dtrain)\n", "dtrain = find_neighborhoods(dtrain, \"pickup_longitude\", \"pickup_latitude\", \"pickup_neighborhood\")\n", "dtrain = find_neighborhoods(dtrain, \"dropoff_longitude\", \"dropoff_latitude\", \"dropoff_neighborhood\")\n", "dtrain = as.data.table(dtrain)"], "execution_count": null}, {"cell_type": "markdown", "source": ["* Same Neighboorhood Rides vs Rides between different Neighboorhood\n", "\n", "I believe that neighborhood wil play an important role in determining the _trip duration_. The historical _average trip duration_ between two neighborhood certainly says something about the _trip duration_ between those two neighborhoods in the future. Below we can see a heatmap of the top 5 pickup neighborhoods in the NY city. I have pick the top 5 because it is easier to visualise.\n"], "metadata": {"_uuid": "a3749a415963a858d3ac494e0aba10f3d8e49e62", "_cell_guid": "53fd3377-58a9-4ffb-8329-177a1e73d231"}}, {"metadata": {"_uuid": "ecb4c009e8eea2047861f947506941db60492959", "_cell_guid": "d146b099-3f42-4430-bd2e-2b77d857b2a7", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["dtrain[, same_neighborhood := as.factor(ifelse(pickup_neighborhood == dropoff_neighborhood, 1, 0))]\n", "\n", "#temp = dtrain[,.(mean = .N),by=pickup_neighborhood][order(-mean)]\n", "dtrain2 = dtrain[pickup_neighborhood %in% c(\"Upper East Side\", \"Upper West Side\", \"Midtown\", \"Flatiron District\", \"Garment District\")]\n", "dtrain3 = dtrain2[dropoff_neighborhood %in% c(\"Upper East Side\", \"Upper West Side\", \"Midtown\", \"Flatiron District\", \"Garment District\")]\n", "\n", "plot1 <- dtrain3 %>%\n", "  group_by(dropoff_neighborhood, pickup_neighborhood) %>%\n", "  summarise(mean = mean(trip_duration)) %>%\n", "  ggplot(aes(dropoff_neighborhood, pickup_neighborhood, fill = mean)) +\n", "  geom_tile() +\n", "  labs(x = \"dropoff_neighborhood\", y = \"pickup_neighborhood\") +\n", "  scale_fill_distiller(palette = \"Spectral\")\n", "\n", "grid.arrange(plot1, ncol=1)\n"], "execution_count": null}, {"cell_type": "markdown", "source": ["Learnings:\n", " \n", " 1. It can be observed that the average _trip duration_ is really low for rides within the neighborhood, it is logical.  \n", " \n", " 2. Average _trip duration_ varies significantly per neighborhood. This is a good thing because based on this we can create a new feature that says something about the _historical trip duration_ between the neighborhoods. \n", " \n", " Let's take a look at _same neighborhood_ and _not same neighborhood_ rides and see what we can find here.\n"], "metadata": {"_uuid": "513ebf0ee7c4a7d1e3aa2188956b0a845aa31b7d", "_cell_guid": "5f656c8a-f34c-4fbc-8d4e-a39def3992f9"}}, {"metadata": {"_uuid": "2f12824cadd315c1e2034ddc8665f2f57b95012a", "_cell_guid": "9c4d9801-ab39-4113-918b-d402d5a30cf2", "collapsed": true}, "cell_type": "code", "outputs": [], "source": ["plot1 = dtrain %>%\n", "  ggplot(aes(same_neighborhood, fill = same_neighborhood)) +\n", "  geom_bar() +\n", "  theme(legend.position = \"none\")\n", "\n", "plot2 = dtrain %>%\n", "  group_by(pickup_hour, same_neighborhood) %>%\n", "  summarise(duration = mean(trip_duration)) %>%\n", "  ggplot(aes(pickup_hour,duration, color = same_neighborhood)) +\n", "  geom_jitter(width = 0.01, size = 2) +\n", "  labs(x = \"hour\", y = \"trip duration\")\n", "\n", "grid.arrange(plot1, plot2, ncol=1)"], "execution_count": null}, {"cell_type": "markdown", "source": ["Learnings:\n", "\n", "  1. From plot 1 we can observe that approximately 12% of the rides are within the same neighborgood. That is around 20,000 rides, which is a lot. \n", "  \n", "  2. In plot 2 we can observe that the average trip for rides within the neighborhood are much lower compared to other rides. So this means that we can  create a new feature that says wherther a trip is within the neighboorhood or otherwise."], "metadata": {"_uuid": "1f8d0216dc5ecfdd1accdd893d26b5614881eb69", "_cell_guid": "3facf366-b396-43db-bb4c-282dff32b0bb"}}], "nbformat": 4, "nbformat_minor": 1}