{"cells":[{"metadata":{"_uuid":"2835786c3f252d2b775da9e131e5b5bc11a1d683","_execution_state":"idle","trusted":false},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"03c6c5db9b4c29fed13c0d5d39a81ce79ab41c82"},"cell_type":"code","source":"application_train <- read.csv('../input/application_train_clean_SMOTEd.csv',1)\ndim(application_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"db1629e606571fca69b6a956bc6890bfed4d48cc"},"cell_type":"code","source":"str(application_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9d8ae23efc1aed5eae8cf464a702a928eb4074b8"},"cell_type":"code","source":"names(application_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"33ad9c0113508c83df1472d232802915372f8d57"},"cell_type":"code","source":"# convert categorical attributes to factor type\ndata_cat <- application_train[,c(1:49)]\ndata_num <- application_train[,-c(1:49)]\ndata_cat <- data.frame(apply(data_cat, 2,function(x){as.factor(x)}))\ndata_num <- data.frame(apply(data_num, 2,function(x){as.numeric(x)}))\napplication_train <- cbind(data_cat,data_num)\nstr(application_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3db3d2d32dc9002a6a13f35ca1a6b8c984d4c929"},"cell_type":"code","source":"application_train <- application_train[,-c(12,38,40,69,70)] # FLAG_MOBIL has got just 1 level; FLAG_DOCUMENT_10 & FLAG_DOCUMENT_12 are almost constants; AMT_REQ_CREDIT_BUREAU_HOUR & AMT_REQ_CREDIT_BUREAU_DAY are constants\n# drop minority observations\napplication_train <- subset(application_train, !(application_train$CODE_GENDER == \"X\"))\napplication_train$CODE_GENDER<-factor(application_train$CODE_GENDER)\napplication_train <- subset(application_train, !(application_train$NAME_FAMILY_STATUS == \"Unknown\"))\napplication_train$NAME_FAMILY_STATUS<-factor(application_train$NAME_FAMILY_STATUS)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"00665a8d8cb09c3d6cf89c6fb8e27cd218250b8c"},"cell_type":"code","source":"# class distribution\ntable(application_train$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4f04ebb18c7ccbb62c1fb8b5d04dbe20d4e5d924"},"cell_type":"code","source":"# Split Data into Train and test - 70:30\nlibrary(caret)\nset.seed(7)\ntrain_test_split<-createDataPartition(application_train$TARGET, p=0.7, list = FALSE)\ntrain_data<-application_train[train_test_split,]\ntest_data<-application_train[-train_test_split,]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"07570425ced9373efbaa9554b110a4e5f969f530"},"cell_type":"code","source":"# train - class distribution\ntable(train_data$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"79f2c2a6799fd4d4ee5d0ffbf44ded7bd85e9fef"},"cell_type":"code","source":"# test - class distribution\ntable(test_data$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b4ce758de99dffaf58de63ef5153d4fdc0c5f2b2"},"cell_type":"code","source":"# Estimate preprocessing parameters\npreproc.param <- train_data[,-c(1)] %>% \n  preProcess(method = c(\"center\", \"scale\"))\n# Transform the data using the estimated parameters\ntrain.transformed <- preproc.param %>% predict(train_data[,-c(1)])\ntest.transformed <- preproc.param %>% predict(test_data[,-c(1)])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1ea27012bc617fca9bed66600080e730ae02cced"},"cell_type":"code","source":"library(MASS)\nmodel <- lda(TARGET~., data = train.transformed)\nplot(model)\nmodel","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"aaeed5708620ea636e6aa5f22e384ee74a35a943"},"cell_type":"code","source":"predmodel.train.lda = predict(model, train.transformed)\npar(mfrow=c(1,1))\nplot(predmodel.train.lda$x[,1], predmodel.train.lda$class, col=train.transformed$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6c3c9d02c950225316e7c57e017126df5c693e84"},"cell_type":"code","source":"# Make predictions\npredictions <- model %>% predict(test.transformed)\n# Model accuracy\nmean(predictions$class==test.transformed$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d7f59d02f171515b56ffaa22d7f0a3ff5d1de0ec"},"cell_type":"code","source":"# Predicted classes\nhead(predictions$class, 10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2fa4d6465930e44b1322541a939362585f92c8da"},"cell_type":"code","source":"# Predicted probabilities of classes\nhead(predictions$posterior, 10) ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"087794a4f6011aecc94e05fd506edb1e1971ab36"},"cell_type":"code","source":"# Linear discriminants\nhead(predictions$x, 2) ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9ee61d28ea1fcdf332a98c179c10d943ade6f0f1"},"cell_type":"code","source":"##Confusion Matrix\nconfusionMatrix(predictions$class,test.transformed$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a3fa8072e64323f867e8e9ee80d1994dcc50a45d"},"cell_type":"code","source":"par(mfrow=c(1,1))\nplot(predictions$x[,1], predictions$class, col=test.transformed$TARGET)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8a1f2fa7ea65599dcdf42baa6916c5316f3a1951"},"cell_type":"code","source":"library(ROCR)\n# ROC - test data\npred<-predict(model,test.transformed, type='raw')\nscore = pred$posterior[, 2]\npred<-prediction(score, test.transformed$TARGET)\nroc<-performance(pred,\"tpr\", \"fpr\")\nplot(roc)\nauc<-performance(pred,\"auc\")\nauc\nauc<-unlist(slot(auc,\"y.values\"))\nauc","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}