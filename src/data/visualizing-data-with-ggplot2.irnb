{"cells": [{"source": ["# Introduction\n", "____\n", "\n", "One of the strengths of R as a language is how easy it makes it to create beautiful, informative visualizations. One of the most popular tools to create data visualizations in R is the ggplot2 library, which is part of the Tidyverse.  \n", "\n", "> The [Tidyverse](https://www.tidyverse.org/), a collection of R packages built around the foundational idea about data in a table should have one variable per column, one observation per row and only one value per cell. \n", "\n", "Ggplot2 is very powerful, but it can take a little getting used to. This tutorial will get you up and running with ggplot2. We're going to use real data to make publication-ready charts using three of the most commonly-used plotting techniques.\n", "\n", "_____________________\n", "### What will I learn?\n", "\n", "By time you finish this tutorial, you will:\n", "\n", "* Understand the underlying philosophy behind ggplot\n", "* Make a scatter plot and..\n", "    * Add a fitted line\n", "    * Add text labels to data points\n", "    * Add a title and label your plot axes\n", "* Make a bar plot and...\n", "    * Choose whether your bar plot is stacked or grouped\n", "    * Split a plot across multiple subplots\n", "    * Create a custom color palette for your plot\n", "* Make a line plot and...\n", "    * Apply themes to your plot\n", "\n", "### What do I need to know before I get started?\n", "\n", "You may find some of the discussion here hard to understand if you don't have a basic familiar with the R language before you begin. I would recommend [this series of lessons](https://www.kaggle.com/rtatman/getting-started-in-r-first-steps/) if you've never used R or never programmed before.\n", "\n", "### What will I need to do?\n", "\n", "As you work through this tutorial, you'll have a number of exercise to complete. You are of course free to fork this notebook and do them here, but the easiest option is to fork a version of [this workbook for this lesson](https://www.kaggle.com/rtatman/visualizing-data-with-ggplot2-workbook/)."], "cell_type": "markdown", "metadata": {"_uuid": "5c8d85ac09576940fc59f060823ab22db5005fff", "_cell_guid": "d8cc9ada-08ca-4d42-bd4c-5d4ab5a1fb74"}}, {"source": [" __________\n", " \n", " # Table of Contents\n", "\n", "*  [The big idea behind ggplot2](#The-big idea-behind-ggplot2)\n", "*  [Scatter plots](#Making-scatter-plots): Includes **adding a fitted line**, **labelling data points** and adding **plot titles & axis labels**.\n", "*  [Bar charts](#Making-bar-charts): Includes **stacked and grouped bar charts**, **splitting plots across multiple smaller plots** and **creating a customized color palette**\n", "* [Line charts](#Line-charts): Includes **applying themes to your plot**\n", "    \n", "    ________________"], "cell_type": "markdown", "metadata": {"_uuid": "cbae2023465df04e396946f10e28890a7615c64f", "_cell_guid": "8e10fb04-e53c-46e5-b2d9-eecac815a5b8"}}, {"source": ["# The big idea behind ggplot2\n", "\n", "______\n", "\n", "Ggplot2 works a bit different from other R packages, and that's by design. \n", "\n", ">The \"gg\" in \"ggplot\" stands for \"the grammar of graphics\". If you're curious, you can learn more about what this means in [this paper](http://vita.had.co.nz/papers/layered-grammar.html).\n", "\n", "Plots in ggplot2 are \"built up\" using multiple functions connected with the plus sign (+). The first function, ggplot(), just draws the outline of the plot, including the the axes and tick marks. It takes two arguments:\n", "\n", "1. The dataset that you want to plot. \n", "2. A function, aes(), short for aesthetic. This function can take multiple arguments, and each argument tells ggplot which variables in the dataset you want to be mapped to which part of the plot. By default, the first two arguments will be assigned to the x-axis and y-axis.\n", "\n", "The ggplot() function itself doesn't actually plot anything, it just creates the outline of the plot. To actually plot something in that outline, we need to add a geom layer to our plot. There are lots of different geom layers (you can see a full list of them [here](http://ggplot2.tidyverse.org/reference/#section-layer-geoms)) and you can add multiple layers to the same plot. The general syntax of ggplot looks like this:\n", "\n", "    # ggplot syntax looks like this\n", "    ggplot(dataset, aes(xaxis, yaxis)) +\n", "        geom_something() +\n", "        geom_somethingElse()\n", "\n", "First you call ggplot() and pass it the dataset & aesthetics you want to plot. Then you add the layer(s) you want. \n", "\n", "Note that you do need to have a plus sign between every layer of the same plot. If you end a line without a plus sign, ggplot2 will think that you're done adding things and ignore everything that shows up after that (you'll also get an error because R doesn't expect lines to begin with +).\n", "\n", "    # This will just plot the empty ggplot, without the geom_something\n", "    ggplot(dataset, aes(xaxis, yaxis))\n", "        + geom_something()\n", "\n", "In this tutorial, we're going to practice making plots using the three [most popular layers](https://eric.netlify.com/2017/08/10/most-popular-ggplot2-geoms/):\n", "\n", "* geom_point() makes a scatter plot, where each data point is represented by a point on the plot\n", "* geom_bar() makes a bar chart, where each bar shows the number of observations in a given category\n", "* geom_line() makes a line plot, where points are connected by a straight line \n", "\n", "Ready? Let's get started!"], "cell_type": "markdown", "metadata": {"_uuid": "f0757d0c5391c38dadf66d4d67ab8c711b02f6fd", "_cell_guid": "3adf6b97-87cc-4eeb-abb0-711b682949f4"}}, {"source": ["# Setting up our workspace\n", "_____\n", "\n", "Before we more on, let's make sure we set up our workspace. We'll need to read in the libraries and data we're going to use. In your workbook, this step has already been done for you. "], "cell_type": "markdown", "metadata": {"_uuid": "85201586088e349fe8c7211d41395767d577b459", "_cell_guid": "0924f716-5299-4d15-a9d3-939a70debf73"}}, {"source": ["# read in our libraries\n", "library(tidyverse) # includes ggplot2\n", "library(ggthemes) # includes pre-made themes we'll use near the end\n", "\n", "# read in our data\n", "candyRankings <- read_csv(\"../input/the-ultimate-halloween-candy-power-ranking/candy-data.csv\")\n", "candyProduction <- read_csv(\"../input/us-candy-production-by-month/candy_production.csv\")"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "ed20bf2cb42b452b432b4b5a102be096c9068663", "_cell_guid": "0885ad4e-eddd-4f1b-b69b-2226307c4797", "_kg_hide-output": true}}, {"source": ["# Making scatter plots\n", "_____\n", "\n", "Now that we have our data loaded into R, we can get started plotting. \n", "\n", "The candyRankings dataset has information on different candies, including how expensive they are and how much sugar they have in them. One question we can ask using this dataset is whether there is a  a relationship between a candy's price and the amount of sugar in it. To see if this is the case, we can use a scatter plot.\n", "\n", "> **Scatter plot:** A plot with two axes, each representing a different variable. Each individual observation is showing using a single point. The position of the point is determined by the value of the variables assigned to the x and y axes for that observation. \n", "\n", "To make a scatterplot, we need to make a blank chart with a mapping for both the x and y aesthetic and then add a geom_point() layer. "], "cell_type": "markdown", "metadata": {"_uuid": "dc19e43389c6ee119edc9245abaa7180802aee36", "_cell_guid": "8f926e09-d220-4899-8471-1e03148ea8a6"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, y = pricepercent)) +\n", "    geom_point() # then add a layer of points"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "dda672bf1591a19a94a7e31bb8c243ef6ddaaa81", "_cell_guid": "218f1be4-a609-4c17-972d-fee654878e46"}}, {"source": ["We can keep adding additional layers to this plot to make it more informative. One thing that is often useful when you're looking at data on a scatter plot is a visual representation of how closely the variable on the x axis and the variable on the y axis are related to each other, and the strength of that relationship. We can summarize this using a fitted line.\n", "\n", "> **Fitted line:** A line representing some function of x and y that has the best fit (or the smallest overall error) for the observed data.\n", "\n", "In ggplot, we can automatically add a fitted line using the layer geom_smooth(). By default, geom_smooth() will show the relationship between the x and y variables using locally weighted scatter plot smoothing (also known as LOESS) rather than by drawing a straight line. If we want a single straight line to summarize our data, we need to specify that we want geom_smooth() to fit a a linear model (or \"lm\")."], "cell_type": "markdown", "metadata": {"_uuid": "c4754d6e7fbd1930a040a22d9f4f3905fc90f2a4", "_cell_guid": "337ec570-cb3b-4536-af98-2184e6138905"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, y = pricepercent)) +\n", "    geom_point() + # then add a layer of points\n", "    geom_smooth(method = \"lm\") # and then add a fitted line"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "f2f00a3ced6ab3a43484295a712b02469692d3bc", "_cell_guid": "cbd79e55-fb6b-4be3-938f-11c2c536ea63"}}, {"source": ["The blue line on the plot represents the linear function we've fitted and shows that there is a relationship between how much sugar is in a candy and how expensive it is: in general, candy with more sugar is more expensive. \n", "\n", "> **What's that gray shape behind the line?** This is the confidence interval for this function. It outlines the area that should contain the line which represents the true function 95% of the time. \n", "\n", "If you're like me, you're probably curious to see which candies fall where on this plot. To show this, we can add yet another layer, this time with the text of the name of different candies. We can use the function geom_text() to do this. However, with our current set-up geom_text() doesn't know what text to plot or where. To plot the names of the candies from the data frame, we're going to need to add another aesthetic mapping when we set up the plot. We need to make sure that ggplot knows that we want to use the information from the competitorname column as the label.\n", "\n", "> **What are all the arguments aes() can take?** As of [November 2017](https://github.com/tidyverse/ggplot2/blob/master/R/aes.r) here's a list of all the possible aesthetic mappings: \"adj\", \"alpha\", \"angle\", \"bg\", \"cex\", \"col\", \"color\",  \"colour\", \"fg\", \"fill\", \"group\", \"hjust\", \"label\", \"linetype\", \"lower\",  \"lty\", \"lwd\", \"max\", \"middle\", \"min\", \"pch\", \"radius\", \"sample\", \"shape\", \"size\", \"srt\", \"upper\", \"vjust\", \"weight\", \"width\", \"x\", \"xend\", \"xmax\",\n", "\"xmin\", \"xintercept\", \"y\", \"yend\", \"ymax\", \"ymin\", \"yintercept\", \"z\". Note that some of these (like, \"col\", \"color\" and \"colour\") will be mapped to the same aesthetic.\n", " \n", " Different geom layers need different aesthetics. If you add an aesthetic that isn't used by any of the layers you're plotting ggplot2 will ignore it, but if you don't add an aesthetic that one of your layers needs no plot will be generated."], "cell_type": "markdown", "metadata": {"_uuid": "9acb4adb0f53eb4c7e79d823292d7cfe1c233237", "_cell_guid": "efa9c819-2410-4f59-a342-c3aef1e497a5"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, \n", "                                 y = pricepercent, \n", "                                 label = competitorname)) + #make sure to add the label aes!\n", "    geom_point() + # then add a layer of points\n", "    geom_smooth(method = \"lm\") + # and then add a fitted line\n", "    geom_text() # and then add labels to the points"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "94d33703ad0b000f0a3587f2dd4e738b633b2deb", "_cell_guid": "64e3b03e-3e1d-48d9-b7ce-8807117f41bc"}}, {"source": ["Oh dear, that's pretty hard to read. We can change the labels to make them easier to read by using some additional arguments from the geom_text function. (You can find a list of all the options and some helpful example charts in the [geom_text() documentation](http://ggplot2.tidyverse.org/reference/geom_text.html).) With a little fiddling, we can make our text labels much easier to read:"], "cell_type": "markdown", "metadata": {"_uuid": "d13b90efbf53e1efe4f4b09deab4c4de71b4740a", "_cell_guid": "f920b78e-e8cc-42cb-b1e6-62338ab90c7e"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, \n", "                                 y = pricepercent, \n", "                                 label = competitorname)) +\n", "    geom_point() + # then add a layer of points\n", "    geom_smooth(method = \"lm\") + # and then add a fitted line\n", "    geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)\n", "              vjust = \"bottom\", # adjust the vertical orientation\n", "              nudge_y = 0.01, # move the text up a bit so it doesn't touch the points\n", "              angle = 30,# tilt the text 30 degrees\n", "              size = 2 # make the text smaller (to reduce overlap more)\n", "             ) # and then add labels to the points"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "3089df340cc71dd0a67d50b73d537cce9bedeb8a", "_cell_guid": "ca80f3b6-4398-4c3c-b7c4-87ee12b2b4d4"}}, {"source": ["Much better! It's not quite ready to go yet, though: \"sugarpercent\" and \"pricepercent\" aren't the most informative axes labels and I'd also like to add a title to the plot.\n", "\n", "> ** Plot titling tips:** a good plot title will summarize the main information in the plot.\n", "\n", "We can add a title and axes lalbels using the [labs() function](http://ggplot2.tidyverse.org/reference/labs.html), which is another layer that we can add to our plot."], "cell_type": "markdown", "metadata": {"_uuid": "67db38f4caf40362ad70a15a86baab01e2bf0133", "_cell_guid": "016f2feb-21a2-4089-9e96-cd5b36e1caeb"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, \n", "                                 y = pricepercent, \n", "                                 label = competitorname\n", "                                )) +\n", "    geom_point() + # then add a layer of points\n", "    geom_smooth(method = \"lm\") + # and then add a fitted line\n", "    geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)\n", "              vjust = \"bottom\", # adjust the vertical orientation\n", "              nudge_y = 0.01, # move the text up a bit so it doesn't touch the points\n", "              angle = 30,# tilt the text 30 degrees\n", "              size = 2 # make the text smaller (to reduce overlap more)\n", "             ) + # and then add labels to the points\n", "    labs(title = \"More sugary candies are more expensive\", # plot title\n", "         x = \"Sugar content (percentile)\", # x axis label\n", "         y = \"Price (percentile)\" # y axis label\n", "        )"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "3909c74a29fe1a44245c246e26a37a3d9e0d6ad0", "_cell_guid": "9db8abdd-3d64-437b-8ada-936bcdf78388"}}, {"source": ["We can also, if we like, remove the points themselves and just use the labels themselves as the points. If we do this, we should probably also remove the arguments from geom_text() that move the labels so they don't overlap with the points."], "cell_type": "markdown", "metadata": {"_uuid": "1783c46572ad60269d084c144d8404554f01d633", "_cell_guid": "39305a94-309a-4d33-ba65-86bb988f9de2"}}, {"source": ["# first we need to set up our plot\n", "ggplot(data = candyRankings, aes(x = sugarpercent, \n", "                                 y = pricepercent, \n", "                                 label = competitorname\n", "                                )) +\n", "    geom_smooth(method = \"lm\") + # and then add a fitted line\n", "    geom_text(check_overlap = T,# automatically reduce overlap (deletes some labels)\n", "              angle = 30,# tilt the text 30 degrees\n", "              size = 2.5 # make the text smaller (to reduce overlap more)\n", "             ) + # and then add labels to the points\n", "    labs(title = \"More sugary candies are more expensive\", # plot title\n", "         x = \"Sugar content (percentile)\", # x axis label\n", "         y = \"Price (percentile)\" # y axis label\n", "        )"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "8e9976f5f563fcc3f66005ba40126af370976ac8", "_cell_guid": "d5cdf3a3-fde2-4a6b-8a0e-62966eb94ee0"}}, {"source": ["And there we are, an informative visualization of this dataset that tells a clear story. You may have noticed that the way I got to this plot was by starting with a very basic plot and then adding more and more information until I got something I was happy with. The way that ggplot2 works strongly encourages this type of work flow and it's the one I personally use in my own work. There's nothing wrong with rendering the same plot twenty times with a tiny tweak each time until you get exactly what you're looking for!\n", "\n", "So far we've learned:\n", "\n", "* how to make a scatter plot using geom_point()\n", "* how to add a fitted line to the data using geom_smooth()\n", "* how to add text labels using geom_text()\n", "* how to add a title and change the x & y axis labels using labs()\n", "\n", "Now it's your turn to try your hand at applying these functions yourself. Head on over to [the workbook for this tutorial](https://www.kaggle.com/rtatman/visualizing-data-with-ggplot2-workbook/) and try it out yourself!\n", "\n"], "cell_type": "markdown", "metadata": {"_uuid": "e9cfbed414c2e486ee4d2b52d7213bf7b286d58c", "_cell_guid": "b2b4b9f3-35f2-4b69-88ea-0ecea66d41ae"}}, {"source": ["# Making bar charts\n", "____\n", "\n", "Scatter plots are great if you're looking at numeric variables (where the thing you're looking at can be measured with a number). But what if you're looking at something like whether one of your observations belongs to a certain group or not?\n", "\n", "In this dataset, we have a lot of information about qualities each candy has. Does it contain chocolate? Is it fruit flavored? Is there caramel in the candy? These are what are called categorical variables, because a given candy candy belongs to one specific category. For example, Reese's Peanut Butter Cups do contain chocolate, are not fruit flavored and do not have caramel in them. (Although, not gonna lie, caramel peanut butter cups sound like they'd be amazing.)\n", "\n", "One of the most common ways of visualizing categorical data is to use a bar chart. \n", "\n", "> **Bar chart**: a data visualization with categories along the x axis and the count of observations from each category on the y axis.\n", "\n", "In ggpolt2, we can make a bar chart using the layer geom_bar(). You'll  notice that when I set up my initial plot, I only give aes() one argument, for the x axis. That's because the counts for the y axis are calculated automatically from my data frame, so I don't need to tell ggplot anything about them."], "cell_type": "markdown", "metadata": {"_uuid": "9b053bc01f2be2f9e21e510f4471709540e09c54", "_cell_guid": "f111f491-f5e4-4c15-896f-be38288dc677"}}, {"source": ["# select out the columns that have the features of the candy (chocolate, caramel, etc.)\n", "candyFeatures <- candyRankings %>% select(2:10)\n", "# make sure that these are booleans (logical)\n", "candyFeatures[] <- lapply(candyFeatures, as.logical)\n", "\n", "# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate)) + # set up the plot\n", "    geom_bar() # add the barpot"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "6089ddbb72a257e3bd55ce11433d669ba56e652f", "_cell_guid": "a511ee48-b28f-4322-849c-309fe5c6cacc"}}, {"source": ["On it's own, this isn't a very interesting chart. Sure, it tells us how many of the candies have chocolate in them, but there's not much utility beyond that. We can make this chart more useful by adding more information to it. Let's see if there's a relationship between the number of candies which have chocolate in them and the number of candies which have caramel. \n", "\n", "To do this, we're going to add an additional aesthetic to our plot. We're going to ask ggplot2 to color-code the bars by setting \"fill\" to caramel.\n", "\n", "> **Why not set \"color\" to caramel?**: The color aesthetic changes the color of lines & the outline of shapes. If we\n", "mapped caramel to color, we'd get a bar chart where the color of the outline of the bar showed us information about caramel instead of the color of the bar telling us about caramel.\n", "\n", "\n"], "cell_type": "markdown", "metadata": {"_uuid": "e65525f75fde83445cbd72846067693d6c69ab60", "_cell_guid": "c334a79b-32fc-4e4e-b9ff-4419127a3398"}}, {"source": ["# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate,\n", "                          fill = caramel # map the fill color to caramel           \n", "                         )) + # set up the plot\n", "    geom_bar() # add the barpot"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "1a073d8db304a7a62d69c32b6ab73d9763f6324c", "_cell_guid": "8a6a732f-4f46-4d54-9063-88fad7f4c92e"}}, {"source": ["We can tell by looking at this chart that most caramel candies also have chocolate in them. It might be slightly easier to see this if the bars in this chart were beside each other rather than stacked on top of each other. We can have our bars next to each other by adding a position argument to geom_bar() and setting it to \"dodge\". (You can see more options for geom_bar() by [checking out the documentation](http://ggplot2.tidyverse.org/reference/geom_bar.html).) \n", "   "], "cell_type": "markdown", "metadata": {"_uuid": "137c5791f3771f7c10db1c71d3934662755050ed", "_cell_guid": "9c2110c9-7894-4d0b-a172-fde89c3d1590"}}, {"source": ["# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate,\n", "                          fill = caramel # map the fill color to caramel           \n", "                         )) + # set up the plot\n", "    geom_bar(position = \"dodge\") # add the barpot"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "4b52db9997207e92ff48f6ede9b03d208fd90a24", "_cell_guid": "b73b3590-0a92-494b-9e62-9295c6bb87e9", "_kg_hide-output": true}}, {"source": ["Not bad! It might be even easier to see the big story here (that there is an interaction between chocolate and caramel) if we pulled apart these two columns and put them into two separate charts. We can do this using the function facet_wrap(), which is another layer that we can add to our plot.  \n", "\n", "> **facets**: A way of breaking apart a plot of a specific data frame so that each level of a the target factor is shown in a separate, smaller chart. \n", "\n", "facet_wrap() doesn't know which factor to use to break apart the chart, though, so we need to pass it a vector of the names of the variables it should use to split the chart into smaller charts."], "cell_type": "markdown", "metadata": {"_uuid": "1995a56abafa9e174c458118c59d295391b09b30", "_cell_guid": "ebd1252b-3a6c-4085-aed0-56494120e0ea"}}, {"source": ["# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate,\n", "                          fill = caramel # map the fill color to caramel           \n", "                         )) + # set up the plot\n", "    geom_bar(position = \"dodge\") + # add the barpot\n", "    facet_wrap(c(\"caramel\")) # put each level of \"caramel\" in a different facet"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "04e851285824e124e51b835be3da7df22bba6070", "_cell_guid": "5d07259c-1c76-4af6-aea0-a7fb84288506"}}, {"source": ["That seems much easier to read! One thing that I would like to change, however, is the colors. Let's change the color theme of our plot. You can change the color of the fill using the layer scale_fill_manual(). You'll need to pass it a vector of colors \n", "by their hex code. (I like [this PDF guide to colors in R](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf).) \n", "\n", "The colors will be matched to the levels of the factor that you've mapped to the fill aesthetic in alphabetic order. In this case, because \"FALSE\" comes before \"TRUE\" alphabetically, I should put the color that I want to show up when caramel is \"FALSE\" first.\n"], "cell_type": "markdown", "metadata": {"_uuid": "7cbdc22034a69bc2bef11b31cbb99cce2cdedcdb", "_cell_guid": "109a7b10-d157-450e-bc7a-d4bd5a7e4c75"}}, {"source": ["# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate,\n", "                          fill = caramel # map the fill color to caramel\n", "                         )) + # set up the plot\n", "    geom_bar(position = \"dodge\", size = 2) + # add the barpot\n", "    facet_wrap(c(\"caramel\")) + # put each level of \"caramel\" in a different facet\n", "    scale_fill_manual(values=c(\"#BBBBBB\", # a nice, neuteral grey \n", "                               \"#E69F00\")) # a gold caramel color"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "a7a0876240732b333dcadc9581aa8bd250e2eded", "_cell_guid": "df9990d9-cfd8-456c-8e13-6592b3fa1e92"}}, {"source": ["Great! This almost looks ready to share. Let's just add a couple more finishing touches, like an informative title and axis labels. I'm also going to move the legend inside of the plot area and remove the legends at the top of the facets using theme(). (I personally like to move legends inside the area of plots if there's a large empty space in our plot, like there is at the top of the facet where the data for the candies with caramel is plotted.)"], "cell_type": "markdown", "metadata": {"_uuid": "d36c676c74b43bcef8a0e59733cb56d622f4d1ed", "_cell_guid": "b9ba3f17-8627-42fd-a1c4-0617924d30f2"}}, {"source": ["# make a bar plot\n", "ggplot(candyFeatures, aes(x = chocolate,\n", "                          fill = caramel # map the fill color to caramel\n", "                         )) + # set up the plot\n", "    geom_bar(position = \"dodge\", size = 2) + # add the barpot\n", "    facet_wrap(c(\"caramel\")) + # put each level of \"caramel\" in a different facet\n", "    scale_fill_manual(values=c(\"#BBBBBB\", # a nice, neuteral grey \n", "                               \"#E69F00\")) + # a gold caramel color\n", "    labs(title = \"Chocolate candies are more likely to have caramel\", # title\n", "        x = \"Is the candy chocolate?\", # x axis\n", "        y = \"Count of candies\") + # y axis\n", "    theme(legend.position = c(0.9, 0.9), # move legend inside plot\n", "          strip.background = element_blank(), # remove strip from top of facets\n", "          strip.text.x = element_blank())  # remove text from top of facets"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "fc1ea83ca2d6feb2f550da00541867ab703189d6", "_cell_guid": "311b2f05-1686-4fb2-9d49-3463cede6b02"}}, {"source": ["As you can see, the general idea of behind ggplot (starting with just a blank plot and slowly adding more and more layers) also lends itself to a general workflow where we start with a very simple plot and add layers until it looks exactly the way we want. \n", "\n", "In this section, we've learned how to:\n", "\n", "* make a bar plot using geom_barplot()\n", "* map a variable to the fill aesthetic\n", "* choose between stacked bar plots and bar plots where the bars are next ot each other\n", "* facet our plots so that each layer of a variable is shown in a seperate, smaller plot\n", "* create a custom color palette for our visualziations\n", "\n", "Now it's time for you to apply the things you've just learned!  Head on over to [the workbook for this lesson](https://www.kaggle.com/rtatman/visualizing-data-with-ggplot2-workbook/) and try your hand at making your own bar plot. "], "cell_type": "markdown", "metadata": {"_uuid": "8709530d165b3f197e24b0186335b4203fee43c8", "_cell_guid": "d2e1dfa0-73ca-4ac3-ae71-d283383009c5"}}, {"source": ["# Line charts\n", "___\n", "\n", "Line charts are most commonly used when you want to show how a measurement has changed over time. The time points are usually shown on the x axis while the value for the measurement is shown on the y axis. Each two adjacent points are connected with a line, hence the name. In ggplot2, you can make a line chart by adding the geom_line() layer. \n", "\n", "Since line charts are generally used with time series data, I'm going to use a different dataset. The candyProduction dataset has information on candy production in the US, measured monthly since 1972. Let's plot it using geom_line(). I'm also going to add a trend line fit with the default LOESS method. "], "cell_type": "markdown", "metadata": {"_uuid": "422dd9ab5312f28fab3f3e235dcd4a9480734449", "_cell_guid": "a9a2756b-9b91-43f1-9360-fdb490cfbb5a"}}, {"source": ["# plot of US candy production per month, with trend line\n", "ggplot(data = candyProduction, aes(x = observation_date, y = IPG3113N)) +\n", "    geom_line() + # add a line chart\n", "    geom_smooth() # add a smoothing function"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "28394d2c38593f539cd451a60361c1fd3f5c7a17", "_cell_guid": "372e7536-1b3a-43d6-a16f-86d7641bf770"}}, {"source": ["You might noticed that we don't have to tell ggplot2 that the observation_date column has dates in is; one of the really nice thing about the Tidyverse is that it will do its best to automatically parse dates. \n", "\n", "Now we've got a nice chart, but it's a little bit boring looking: it just uses the default ggplot2 theme. What if we want to add a little pizazz?\n", "\n", "One way we can do this quickly is by adding custom themes. The ggthemes package that we loaded in above has a lot of custom themes that we can add as custom layer. First, let's save our plot to a variable. "], "cell_type": "markdown", "metadata": {"_uuid": "635d2042ae454434392e9ff792da3fd046a042b4", "_cell_guid": "db859f0e-f4df-4f39-b37d-7baabb4fb1f0"}}, {"source": ["# save our line plot to a variable\n", "linePlot <- ggplot(data = candyProduction, aes(x = observation_date, y = IPG3113N)) +\n", "    geom_line() + \n", "    geom_smooth() +\n", "    labs(title = \"Monthly candy production (US)\",\n", "        x = \"\", # making the axis label blank will remove it\n", "        y = \"As percent of 2012 production\")"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "8f29db3403445fa9c79ecdc513ba7cda5b982cce", "_cell_guid": "2e29207a-663b-4a2a-bc49-ec1ef27d61c3"}}, {"source": ["Now let's play around with using different themes. You can find examples of [all of the themes in ggthemes package here](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) and a [list of all the themes bulit into ggplot here](http://ggplot2.tidyverse.org/reference/ggtheme.html). It's also possible for you to make your own themes, but since that's [fairly involved](http://joeystanley.com/blog/custom-themes-in-ggplot2) we're not going to cover that here. "], "cell_type": "markdown", "metadata": {"_uuid": "907ef755fa713c241a475c8b12d9c465b711940f", "_cell_guid": "eba7b4d1-5d13-44d1-9447-68f4f19366e1"}}, {"source": ["# plot with the Economist theme\n", "linePlot + theme_economist()"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "b46ed9670a9c66eeaa9d0191f2bf4509f6cce345", "_cell_guid": "95643ac6-2331-40c8-925b-6cd3908a8277"}}, {"source": ["# plot with the 538 theme\n", "linePlot + theme_fivethirtyeight()"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "fe7ab0ff1fbd80c3e5c4573bf85187249e7be560", "_cell_guid": "e930a1cf-8277-4250-a788-5738322ab122"}}, {"source": ["# plot with the theme based on Few (2001)\n", "linePlot + theme_few()"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "2c38098105fca6cb96f8d521b4eb1f4176917402", "_cell_guid": "b7c299ae-72a8-4b8d-96d4-dc2e6f9ce8ce"}}, {"source": ["# plot with the theme based on older Excel plots\n", "linePlot + theme_excel()"], "cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_uuid": "1e35efde6f474e5c4e957ead9eb3d633e07d1d74", "_cell_guid": "caf2113f-7b90-4c49-a6b3-8b11183c8085"}}, {"source": ["And that's pretty much it! In this section you've learned how to:\n", "    \n", "* make line charts using geom_line()\n", "* apply different themes from the ggthemes package\n", "\n", "Now it's time for you to try your hand at making line charts. Head on over to [the notebook for this lesson](https://www.kaggle.com/rtatman/visualizing-data-with-ggplot2-workbook/) and try your hand at making your own line charts."], "cell_type": "markdown", "metadata": {"_uuid": "f8bda839890b1b143233e7be421eec50785c9c12", "_cell_guid": "7c3a0f5e-d7cf-4b0e-a97d-db135abbf8eb"}}, {"source": ["# Conclusion\n", "___\n", "\n", "And that wraps it up for this beginner ggplot2 tutorial. At this point, particularly if you've been completing the exercises in the workbook, you should:\n", "\n", "* Understand the underlying philosophy behind ggplot\n", "* Be able to make a scatter plot and..\n", "    * Add a fitted line\n", "    * Add text labels to data points\n", "    * Title and label your plot axes\n", "* Be able to make a bar plot and...\n", "    * Choose whether your bar plot is stacked or grouped\n", "    * Split a plot across multiple subplots\n", "    * Create a custom color palette for your plot\n", "* Be able to make a line plot and...\n", "    * Apply themes to your plot\n", "    \n", "You've also seen a few examples of the process for creating new charts: start simply, with a single geom, and then slowly add more and more layers until it looks exactly how you want it.\n", "\n", "Congrats on getting started with ggplot! Now that you've got some practice, why not head over to [the datasets page](https://www.kaggle.com/datasets) and apply your new skills to a different dataset?"], "cell_type": "markdown", "metadata": {"_uuid": "11ba38410c979b19a45b2c3d2b2455e174e70b2d", "_cell_guid": "d2ab23a2-d749-45bd-8c9f-8ef1901c232a"}}], "nbformat_minor": 1, "nbformat": 4, "metadata": {"language_info": {"codemirror_mode": "r", "mimetype": "text/x-r-source", "file_extension": ".r", "version": "3.4.2", "pygments_lexer": "r", "name": "R"}, "kernelspec": {"language": "R", "display_name": "R", "name": "ir"}}}